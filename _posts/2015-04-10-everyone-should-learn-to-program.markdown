---
layout:     post
title:      "Everyone Should Learn To Program"
subtitle:   ""
date:       2015-04-10 03:25:21
author:     "Joey F. Poon"
header-img: "img/home-bg.jpg"
---

<p>I have to be honest, I spent so much time working on a<a href="{{ site.baseurl }}/working-efficiently.html"> program that will do my job</a> that I probably could have finished the job already. I'm finally seeing first-hand what people mean when they say that software is never done. Every time I thought I was done, a bug would rear its head or I would realize that I forgot to include something. Then everything works great for an hour and then it blows up again. Fix it, add some convenience features, break it again, fix it again, refactor, and the cycle goes on and on. Needless to say, I would absolutely make the same decision to write the program again. While I certainly could have just done my job manually, writing a program to do it not only makes my job easier, it also makes it so that anyone doing my job in the future will have it easier. There is definitely a net time and productivity gain to be had.</p>

<p>Beyond just netting more time and productivity down the line, this is an amazing learning experience. This is the first program I created to help me with my day job. As I write this program, I can see first hand where all the good software engineering advice you read online comes from. Currently, the <a href="https://github.com/joeypoon/Summer_FA_Calculator">program</a> sits in a single file. I understand from all my reading that this is a terrible design. Trying to fix bugs in real-time, however, really gives it perspective. All the magic numbers, the lack of methods and classes, and lack of testing really humbles you. While I'll probably be done with my current stack of paperwork before I finish tidying up my code (yay, deadlines), I definitely plan on doing some major re-hauling of the code.</p>

<p>So I just wrote 2 paragraphs and none of it has to do with why everyone should learn to program (because it's awesome, duh). Other than learning about programming itself, I learned a ridiculous amount of stuff about my job. Having to sit and pound out an algorithm to do your job for you really forces you to learn how everything works in the background (I no longer need this <a href="http://ifap.ed.gov/dpcletters/attachments/20142015PellGrantPaymentandDisbursementSchedules.pdf">atrocity</a>). Things that work are no longer just magic. I'm doing less work (programming isn't work!) and I'm definitely better at my job now.</p>

<p>Perhaps the most magical thing about this whole experience is the fact that I'm enjoying work more. When I saw that stack of paperwork on Wednesday, I was depressed. Half of the reason I started writing a program to do my job was simply because I was procrastinating. As I got closer to completion, however, I found myself looking forward to starting to work on the paperwork. I was even excited to go into work this morning because I knew I could use my program for it. As I analyzed why I suddenly felt happier even though I still had to do a stack of applications, I realized that work was no longer work. The stack of papers was simply a test for my program. Every time I squashed a bug, I would eagerly put in the next application in hopes that it was crushed forever. Every time I added a feature, I would enter an application with anticipation. Programming just makes everything better.</p>
