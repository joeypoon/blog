<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog | Joey F. Poon</title>
    <description>A Programmer&#39;s Adventures</description>
    <link>joeypoon.com/blog/</link>
    <atom:link href="joeypoon.com/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 01 Jul 2016 20:37:27 -0500</pubDate>
    <lastBuildDate>Fri, 01 Jul 2016 20:37:27 -0500</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Performance Optimization</title>
        <description>&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt;
&lt;p&gt;So these last couple of days, I have been trying to optimize a certain page at work. It already received a partial rebuild from Angular to React but we were starting to see some slow down when the page got busy. The busiest part of the page is a table (about 25 rows x 10 columns) that received 1 or 2 updates every 5 seconds per row. This proved to be a performance problem with the &lt;a href=&quot;/blog/understanding-angular-data-binding&quot; target=&quot;\_blank&quot;&gt;&lt;code&gt;$digest&lt;/code&gt; cycle constantly retriggering&lt;/a&gt; so we rewrote the table in React. This improved the situation but we still see a slowdown when it gets busy; enter JavaScript profiling with Chrome Dev Tools.&lt;/p&gt;

&lt;h3 id=&quot;javascript-profiling&quot;&gt;JavaScript Profiling&lt;/h3&gt;
&lt;p&gt;JS profiling allows us to see exactly what functions are using up our resources and how long they are running for. To start profiling: cmd + alt + i to open up dev tools, click profiles, select collect JavaScript CPU profile, and click start. Click stop when you’re ready to stop recording. By default you’ll see the data organized by ‘Heavy (Bottom Up)’ which shows you the most time intensive functions on top. I like to use the flame chart since it’s more visual; click ‘Heavy (Bottom Up)’ and select chart. Here’s what mine looked like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/img/performance-optimization-before.png&quot; target=&quot;\_blank&quot;&gt;
  &lt;img src=&quot;/blog/img/performance-optimization-before.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It defaults to a zoomed out view but you can zoom in to the trouble areas for a more detailed look as I have above. I can see here that my &lt;code&gt;$digest&lt;/code&gt; cycle is taking a good ~150ms. I can also see that the vast majority of the &lt;code&gt;$digest&lt;/code&gt; cycle is being taken up by &lt;code&gt;angular.copy&lt;/code&gt;. &lt;code&gt;angular.copy&lt;/code&gt; is used by &lt;code&gt;$digest&lt;/code&gt; to copy the value of a &lt;code&gt;$watch&lt;/code&gt; for dirty checking. This tells me that I should probably look at my &lt;code&gt;$watch&lt;/code&gt;ers.&lt;/p&gt;

&lt;h3 id=&quot;watching-the-watchers&quot;&gt;Watching the &lt;code&gt;$watch&lt;/code&gt;ers&lt;/h3&gt;
&lt;p&gt;If you’re interested in an easy way to look at your &lt;code&gt;$watch&lt;/code&gt;ers, I found this &lt;a href=&quot;https://medium.com/@kentcdodds/counting-angularjs-watchers-11c5134dc2ef#.cpc8prsle&quot; target=&quot;\_blank&quot;&gt;post&lt;/a&gt; to be especially useful; it’s what I used. A quick check gives me &amp;gt;300 &lt;code&gt;$watch&lt;/code&gt;ers. That’s more than I expect given that the main table is built with React. 300 is a bit much to look through manually so I remove all the elements on the page other than the main table itself. This leaves me with 16 &lt;code&gt;$watch&lt;/code&gt;ers, much more managable. Digging through the &lt;code&gt;$watch&lt;/code&gt;ers I find something interesting, an array with the same length as the current number of table rows (of course it’s the last one I check…).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/img/performance-optimization-watchers.png&quot; target=&quot;\_blank&quot;&gt;
  &lt;img src=&quot;/blog/img/performance-optimization-watchers.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking through the code, I see that the array is actually a &lt;code&gt;$scope&lt;/code&gt;d Angular model being passed in to the React table as a prop. I know that the objects inside the array are fairly complex so my theory at this point is that &lt;code&gt;angular.copy&lt;/code&gt; is having trouble deep copying all the objects.&lt;/p&gt;

&lt;h3 id=&quot;testing-my-theory&quot;&gt;Testing my Theory&lt;/h3&gt;
&lt;p&gt;I had already setup a Redux store so it is easy to test my theory. Instead of passing the array directly to the React table, I will send it to the store using &lt;code&gt;store.dispatch&lt;/code&gt; and use &lt;code&gt;ReactRedux.connect&lt;/code&gt; to hook it into the React table. Let’s test the results:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/img/performance-optimization-after.png&quot; target=&quot;\_blank&quot;&gt;
  &lt;img src=&quot;/blog/img/performance-optimization-after.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can’t even find &lt;code&gt;$digest&lt;/code&gt; or &lt;code&gt;angular.copy&lt;/code&gt; on the flame chart anymore. What a beautiful time improvement :).&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jul 2016 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/performance-optimization</link>
        <guid isPermaLink="true">joeypoon.com/blog/performance-optimization</guid>
        
        
      </item>
    
      <item>
        <title>Understanding Angular Data Binding</title>
        <description>&lt;p&gt;So this is a little late now that Angular 2 is coming out but I still have to write Angular at work so here it is: how Angular knows when data has changed.&lt;/p&gt;

&lt;h3 id=&quot;angular-context&quot;&gt;Angular Context&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Angular context&lt;/em&gt; basically means something that Angular knows about. You’ve probably heard of &lt;code&gt;$watch&lt;/code&gt;, &lt;code&gt;$digest&lt;/code&gt;, and &lt;code&gt;$apply&lt;/code&gt; before but may not have actually used them. This is because everything you use from the Angular library is automatically executed in the &lt;em&gt;Angular context&lt;/em&gt; and will use &lt;code&gt;$watch&lt;/code&gt;, &lt;code&gt;$digest&lt;/code&gt;, and &lt;code&gt;$apply&lt;/code&gt; for you. However, sometimes you run into bugs that you can’t explain or performance issues and that is when knowledge of &lt;code&gt;$watch&lt;/code&gt;, &lt;code&gt;$digest&lt;/code&gt;, and &lt;code&gt;$apply&lt;/code&gt; will be useful.&lt;/p&gt;

&lt;h3 id=&quot;watch&quot;&gt;$watch&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$watch&lt;/code&gt; tells Angular to watch something for changes. Angular automatically adds a &lt;code&gt;$watch&lt;/code&gt; when you use directives (&lt;code&gt;ng-model&lt;/code&gt;, &lt;code&gt;ng-repeat&lt;/code&gt;, etc) or data-binding {{ myModel }}. You can also manually tell Angular to &lt;code&gt;$watch&lt;/code&gt; something:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/8ec148cb05ce428db9ebffe59d53dcb6.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;$watch&lt;/code&gt; checks by reference by default so if you need to check by value such as in the second example above, you need to pass &lt;code&gt;true&lt;/code&gt; as the third param. It is important to note that &lt;code&gt;$watch&lt;/code&gt; doesn’t actually do dirty-checking or change the DOM to reflect the changes. When does that happen you ask?&lt;/p&gt;

&lt;h3 id=&quot;digest&quot;&gt;$digest&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$digest&lt;/code&gt; is what actually checks for and triggers changes. When &lt;code&gt;$digest&lt;/code&gt; is called the &lt;code&gt;$digest&lt;/code&gt; cycle starts. During the &lt;code&gt;$digest&lt;/code&gt; cycle, all of the &lt;code&gt;$watch&lt;/code&gt;ers on the current and children scope are checked for changes. If any changes are present, the cycle is repeated. This will continue until no more changes are found (or 10 cycles looped) and the cycle ends leaving the DOM to be updated with the reported changes.&lt;/p&gt;

&lt;h3 id=&quot;apply&quot;&gt;$apply&lt;/h3&gt;
&lt;p&gt;So if &lt;code&gt;$watch&lt;/code&gt; and &lt;code&gt;$digest&lt;/code&gt; are enough to check for changes and update the DOM, why is this post not finished? Because when Angular runs the &lt;code&gt;$digest&lt;/code&gt; cycle for you, it is actually calling &lt;code&gt;$apply&lt;/code&gt; first. &lt;code&gt;$apply&lt;/code&gt; calls &lt;code&gt;$rootScope.$digest&lt;/code&gt;. This is an important difference for two reasons. First, this executes from the &lt;code&gt;$rootScope&lt;/code&gt; instead of the current scope. Second, &lt;code&gt;$apply&lt;/code&gt; will apply the &lt;code&gt;$digest&lt;/code&gt; the &lt;em&gt;Angular context&lt;/em&gt;. This is good since Angular will be able to catch any exceptions.&lt;/p&gt;

&lt;p&gt;And now you’re an expert on Angular data binding.&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jun 2016 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/understanding-angular-data-binding</link>
        <guid isPermaLink="true">joeypoon.com/blog/understanding-angular-data-binding</guid>
        
        
      </item>
    
      <item>
        <title>Undertanding JavaScript</title>
        <description>&lt;p&gt;This week I spent quite a bit of time brushing up on some JavaScript fundamentals so I thought it would be a good idea to do a review.&lt;/p&gt;

&lt;h3 id=&quot;variable-hoisting&quot;&gt;Variable Hoisting&lt;/h3&gt;
&lt;p&gt;In JavaScript, variable declarations are automatically hoisted to the top of the current scope. This means that&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/76788be38e5e6c79cc32dfb7ab8db438.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Is the same as&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/cf554a9ad025fba8d96f15080561ee81.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Only declarations are hoisted&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/e1990515253f1a5204196e88a9db508d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Is &lt;em&gt;not&lt;/em&gt; the same as&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/1c6f8cf036ca47a1ebdfae3ccd251d59.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It logs undefined because only the declaration and not the initialization is hoisted to the top.&lt;/p&gt;

&lt;h3 id=&quot;closures&quot;&gt;Closures&lt;/h3&gt;
&lt;p&gt;You may have seen something like this before&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/5bf7e02fe8b96480f2737f75291d7896.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Albeit simple, this is an anonymous function in a closure which calls itself. So what good are closures? Closures are great for emulating private variables and methods. Let’s look at an example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/f8534b27a9653cec9b4a60698dcedb70.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The count variable is private and can’t be modified outside of the increment method we defined.&lt;/p&gt;

&lt;h3 id=&quot;classes&quot;&gt;Classes&lt;/h3&gt;
&lt;p&gt;Prior to ES2015 and the class keyword, constructor functions were the only way to create classes in JS.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/f01b85b585afcbb27dd4a21249cec811.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now with ES2015 we can do:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/33d61d85e5036b40ddfc92d3acdf178c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see above, you can also use the static keyword to create a class method. Now, we can’t talk about JS classes without talking about prototypes. JS isn’t really a classed language, it is a prototype-based language. Even the class keyword in ES2015 is just syntax sugar. Under the hood, JS still uses prototypes. A prototype is just an object’s parent object. What this means is that we can inherit methods through the prototype.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/12e5f90b4cf3139ac07a22e1047532da.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Sat, 25 Jun 2016 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/understanding-javascript</link>
        <guid isPermaLink="true">joeypoon.com/blog/understanding-javascript</guid>
        
        
      </item>
    
      <item>
        <title>Async requests in React + Redux</title>
        <description>&lt;p&gt;So recently I had the pleasure of integrating React + Redux into an Angular/Rails project at work and I needed to come up with a good way to organize async requests. For some reason I neglected to google at the time to see that there were options like redux-thunk but I’m kind of happy with the result. So without further ado:&lt;/p&gt;

&lt;p&gt;Just a regular ajax request.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/ddd0ee5b8ca58ef7f7897b6177668c1c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Include the request and request params in the action.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/dd91899a25945291e6bed749342f818b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Check in the middleware for a remote action and call it with the params.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/897247cb88a0934e18bed97b1373d0d9.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Hook the middleware into the store.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/joeypoon/7fbfd8bf65984f1f50bdc488dad36459.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So basically anytime an action with a remote is created, the async request will automatically be called in the middleware.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jun 2016 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/async-requests-in-react-redux</link>
        <guid isPermaLink="true">joeypoon.com/blog/async-requests-in-react-redux</guid>
        
        
      </item>
    
      <item>
        <title>Understanding the JS ecosystem as a Rubyist (Part 1)</title>
        <description>&lt;h3 id=&quot;these-are-my-confessions&quot;&gt;These are my confessions&lt;/h3&gt;
&lt;p&gt;I have a confession. I have been cheating when it comes to React. I have just been throwing it into my Rails projects. While this works for most of my use cases, it really has just been an excuse to not learn the front-end ecosystem. It’s scary. There are so many words being thrown around when it comes to JS that it can get a little intimidating. Well, I finally sat down and learned what I really need for just the basics.&lt;/p&gt;

&lt;h3 id=&quot;getting-started-with-npm&quot;&gt;Getting started with npm&lt;/h3&gt;
&lt;p&gt;To get started, the first thing you need is npm. npm stands for &lt;strong&gt;N&lt;/strong&gt;ode &lt;strong&gt;P&lt;/strong&gt;ackage &lt;strong&gt;M&lt;/strong&gt;anager and is used for installing JS packages or modules (package and module can be used interchangeably). Packages are like gems. So npm is basically a gem manager. Unlike gems, you have to first initialize your project for npm with &lt;code&gt;$ npm init&lt;/code&gt;. This will create a package.json file which keeps track of the packages you installed in this project. This way, when someone else clones your project, their npm knows what packages to install to make the project run.&lt;/p&gt;

&lt;h3 id=&quot;installing-packages&quot;&gt;Installing Packages&lt;/h3&gt;
&lt;p&gt;After you initialize your project you can install packages using &lt;code&gt;$ npm install packageName&lt;/code&gt;. What this does is install the package to a directory in your project root called node_modules (You should add this to your .gitignore). In addition, if you add the –save flag &lt;code&gt;$ npm install packageName --save&lt;/code&gt;, it will automatically add the package to your package.json file.&lt;/p&gt;

&lt;h3 id=&quot;global-install&quot;&gt;Global install&lt;/h3&gt;
&lt;p&gt;Unlike &lt;code&gt;$ gem install gemName&lt;/code&gt; which is a global install that you can access anywhere, npm install is a local install. You can only use the package in the directory you installed it. If needed, you can add the optional -g flag to save a package globally &lt;code&gt;$ npm install -g packageName&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;scripts&quot;&gt;Scripts&lt;/h3&gt;
&lt;p&gt;In your package.json, you can add npm scripts. These are basically terminal aliases. You can run them using &lt;code&gt;$ npm run scriptName&lt;/code&gt;. An example use case would be for tests &lt;code&gt;$ npm run tests&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// projectRoot/package.json  
{  
  &quot;scripts&quot;: {  
    &quot;scriptName&quot;: &quot;some terminal command&quot;
  }  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s now 1:20 AM so I am going to call it a night here. Stay tuned for part 2!&lt;/p&gt;
</description>
        <pubDate>Thu, 19 May 2016 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/understanding-the-JS-ecosystem</link>
        <guid isPermaLink="true">joeypoon.com/blog/understanding-the-JS-ecosystem</guid>
        
        
      </item>
    
      <item>
        <title>Life After The Iron Yard: Starting a New Career</title>
        <description>&lt;h3 id=&quot;a-look-back&quot;&gt;A look back&lt;/h3&gt;
&lt;p&gt;I think the questions that most programming bootcamp students will have at one point or another can be condensed into:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Is this really worth the money?&lt;/li&gt;
  &lt;li&gt;Will this help me get my foot in the door (read: job)?&lt;/li&gt;
  &lt;li&gt;Is this actually going prepare me for a career in software?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I talked about whether TIY has been worth the money for me during &lt;a href=&quot;/blog/week-6-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;week 6&lt;/a&gt;. And just to make it more quantifiable, I will add that I paid 12k for the course and got a 16k bump in pay. I talked about my process of getting a job during &lt;a href=&quot;/blog/week-10-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;week 10&lt;/a&gt; and &lt;a href=&quot;/blog/week-11-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;week 11&lt;/a&gt;. The third question probably won’t become a concern until later in a bootcamp’s program, likely when imposter syndrome really starts to set in, but it has been a very real concern of mine until recently. Finishing up my second week as a new software engineer, I feel like I can now comfortably provide insight on the last question.&lt;/p&gt;

&lt;h3 id=&quot;fake-it-until-you-become-it&quot;&gt;Fake it until you become it&lt;/h3&gt;
&lt;p&gt;Even when you graduate, you will feel like a fake. Your interviewers will ask you about words and concepts that you have never heard of before. You will think that you bombed. This is normal. The fact is that you cannot know everything and you will not know everything. Don’t be afraid to ask for clarification or for a question to be rephrased. Often times what you’re being asked is simply words that you don’t yet know for something that you’ve been doing for the last 3 months.&lt;/p&gt;

&lt;p&gt;The first question for my very first dev interview was to explain ORMs. Object-relational mapping, sounds super complicated right? Actually, that’s just the theory stuff behind active record and you’ve been using it ever since you’ve learned Rails. I sure as heck didn’t know what it was back then. My answer was terrible and I knew I bombed. To my surprise, I was asked to do a second round interview. I don’t know whether or not I would have gotten through the second round because I had accepted an offer with another company but the point is that you’re not expected to know everything. You will most certainly be expected to be able to learn what’s needed, however.&lt;/p&gt;

&lt;h3 id=&quot;be-teachable&quot;&gt;Be teachable&lt;/h3&gt;
&lt;p&gt;What this means is that it is actually more important for you to show how teachable you are. Considering that you just spent every waking hour for the last 3 months of your life learning how to program, being genuine is probably a good bet. I mean, during my interview with my current employer, I was asked about my experience with AngularJS and complicated data models. I had no experience with AngularJS and my data models have been fairly simple. However, I let them know: I started learning Rails recently and you can see how fast I learn. I made sure to also point out that I learned and implemented React into my Rails project within a weekend.&lt;/p&gt;

&lt;p&gt;The truth is: the intensive time you spend learning at bootcamp is probably more intense than any additional learning you will need for a job. When I looked at the code that I would be responsible for maintaining and improving, it was miles above what I had been working with. The schema was more than 10 times longer than the most complicated schemas that I have built, that’s not even mentioning all the various associations that the models had with each other. But, it doesn’t matter. I learned how to break problems down into smaller problems. I learned how to sequentially step through a program to see what does what. I learned how to learn.&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt;
&lt;p&gt;I didn’t know how to do my job on my first day. I knew how to change that though. I spent my first couple days grinding code school, documentation, and digging through the code base. I was actually able to learn CoffeeScript, AngularJS, and a lot more Rails. As much Rails as we learned in Iron Yard, it’s amazing to see how much more complex Rails actually gets. I was given my first feature to implement on my fourth day and because I knew what to study, I was able to get a basic working version within the day. I had my first code review at the end of my second week and let’s just say that I get to keep my job :wink:&lt;/p&gt;

&lt;p&gt;If you work hard during bootcamp, you will be rewarded. I have zero regrets and I can now confidently say that the Iron Yard has prepared me well for a career in software engineering.&lt;/p&gt;

&lt;h3 id=&quot;other-stuff&quot;&gt;Other stuff&lt;/h3&gt;
&lt;p&gt;In case you’re curious, we are moving ahead with commercializing our final project. Here’s a very bad and outdated &lt;a href=&quot;http://joeypoon.com/admi/&quot; target=&quot;\_blank&quot;&gt;video and landing page&lt;/a&gt;. The API for the mailing list works so you can actually sign up for updates on the project. We’re working on updating the landing page, recording an updated video, and getting a domain. In fact, don’t watch that video until we update it because it looks like crap compared to its current state.&lt;/p&gt;

&lt;p&gt;If you’re curious about the new job, it’s super awesome great. I’ve probably gained a couple pounds from all the free food and I’m constantly caffeinated. It’s terrible, I know, but it’s awesome. They’re super cool and flexible with schedules which is great for vampires like me. They got me a shiny new souped up mac book pro to jam code away on if I want to do a little work remotely. In the office, I get to plug my MBP into a 31 inch monitor with a nice window view of the main street. We actually just had a company party yesterday complete with a smash bros tournament and ridiculously generous raffle prizes. This is how to keep your employees happy. Life is good :smile:&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/life-after-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/life-after-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 11 The Iron Yard</title>
        <description>&lt;h3 id=&quot;impending-end-and-beginning&quot;&gt;Impending End and Beginning&lt;/h3&gt;
&lt;p&gt;Time passes far too fast. I honestly can’t believe that my time as an Iron Yard student is coming to an end. It feels like just yesterday that I started learning Ruby. Today, building and deploying full stack Rails apps is an everyday fact. Thanks to Jesse and everyone at the Iron Yard, I can now call myself a software engineer. That’s right, this past week I received and accepted an offer to be a full-time software engineer. It has been a long journey from my first line of html over a year and a half ago. I look forward to what I will learn in the next year and a half.&lt;/p&gt;

&lt;h3 id=&quot;project-update&quot;&gt;Project Update&lt;/h3&gt;
&lt;p&gt;So much sadness and happiness but we’re not quite there yet. With my start date on Monday, we have one less week to finish our final project. Fortunately we made some breakthroughs this week. Look at this beauty:
&lt;img src=&quot;/blog/img/contacts-1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okay, so it still needs tons of styling but most of the features essential for minimum viable product are up and running. An interesting challenge I faced this week is the restructuring of the data models. It was a ton of headache and fun because the most complicated data relationships I’ve had to deal with so far is probably my &lt;a href=&quot;https://joey-staple.herokuapp.com/login&quot; target=&quot;\_blank&quot;&gt;Staple project&lt;/a&gt; from &lt;a href=&quot;/blog/week-7-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;week 7&lt;/a&gt;. Category tags and user follows are easy with gems.&lt;/p&gt;

&lt;p&gt;This is the first time I had to create so many relationships by hand. The hard part isn’t actually writing them, however. The hard part is figuring out the best way to structure your models. Users have contact information and locations that they need to share to other users. Users also need contact lists to store other users and they need to be able to choose what information to share on each share. At one point I tried putting everything in a separate model and it got messy fast. I have since found a happy medium but I still can’t shake the feeling that my tables have too many columns that should be their own tables. Hopefully some time later I can look back at the models and laugh at how silly it is.&lt;/p&gt;

&lt;h3 id=&quot;random-learning&quot;&gt;Random Learning&lt;/h3&gt;
&lt;p&gt;A fairly common thing I see on job listings is the ability to setup a linux server. Wat. Can I just use Heroku? No clue how to linux so I asked Justin. I’m not sure if I have talked about it but Matt is moving up the Iron Yard ladder and Justin from &lt;a href=&quot;/blog/week-2-the-iron-yard-and-my-first-hackathon&quot; target=&quot;\_blank&quot;&gt;week 2 fame&lt;/a&gt; will be taking over Matt’s teaching duties. So anyways, Justin showed me how he hosts his websites and I was like oh. Using linux is basically using terminal. It makes sense why TIY makes us use macs now. Just ssh into your linux box and ftp your Rails app and all is well. Definitely going to try to port some of my Rails apps to digitalocean or something.&lt;/p&gt;

&lt;p&gt;During the interview for my new position, they mentioned that they need Angular.js so I started learning Angular this week. It’s honestly pretty straight forward. You have controllers that you link to your html using directives. I haven’t dug too deep yet but on the surface, it seems easier to understand than React. I still haven’t formed an opinion on which one I like more.&lt;/p&gt;

&lt;h3 id=&quot;the-talks&quot;&gt;The Talks&lt;/h3&gt;
&lt;p&gt;Our speaker this week is a &lt;a href=&quot;/blog/week-2-the-iron-yard-and-my-first-hackathon&quot; target=&quot;\_blank&quot;&gt;revisit&lt;/a&gt; from Daniel @ Stackwave. Daniel’s talk is a deeper look into SQL databases. Daniel went over the basic mathematical premise that powers SQL dbs. He also very succulently explained how certain SQL functions like table joins work. For me, the biggest ohhhhh moment is when he explained entity integrity and referential integrity. I had previously thought that uids and foreign keys were the same thing. This made it difficult to understand the point of something like add_index in Rails. I love listening to smart people.&lt;/p&gt;

&lt;p&gt;My team and I also had the chance to meet with Hesam &lt;a href=&quot;/blog/week-10-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;again&lt;/a&gt; for coffee. We arranged a meet time when we met him last week to get some tips on next steps and focus points for our project if we are to make it commercial. We have been so focused on getting a working product that we completely forgot about some important logistics. Things like time commitments from each member after Iron Yard, equity, and surveying users.&lt;/p&gt;

&lt;p&gt;I believe that Brian also gave a cover letter talk but I wasn’t able to make that one :sadface:.&lt;/p&gt;

&lt;h3 id=&quot;other-stuff&quot;&gt;Other Stuff&lt;/h3&gt;
&lt;p&gt;This upcoming week will be my first week in my new career and demo day. Expect exciting things :).&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Jul 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-11-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-11-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 10 The Iron Yard</title>
        <description>&lt;h3 id=&quot;the-search-begins&quot;&gt;The Search Begins&lt;/h3&gt;
&lt;p&gt;With only 2 weeks remaining, job searching is naturally becoming a larger part of day-to-day life. I had my first interviews this week and boy did I screw up. I’m not sure what happened but I completely blanked out at a simple question like ‘describe your rails experience.’ Fortunately this served as a good wake up call as I performed much better subsequently.&lt;/p&gt;

&lt;p&gt;I also had my first whiteboarding experience. It was both fun and terrifying. It’s great in the sense I get to do what I love during an interview and secondly, I am no longer judged by my resume but my actual coding ability. It is terrifying in the fact that you’re put on the spot without your dev tools. I actually blanked out for what felt like an eternity for one of the whiteboard problems. Practice more Ruby before you interview.&lt;/p&gt;

&lt;h3 id=&quot;project-update&quot;&gt;Project Update&lt;/h3&gt;
&lt;p&gt;Since lectures are over and our remaining time is self-paced final projects, I won’t be going over the days separately. As my project is actually quite large in scope, I’m working in a team of 3. If you’re thinking about attending Iron Yard, I highly recommend doing a team project for your final project as well. My reasoning is that one, you can have a larger and more impressive project. Second, it is great practice for an agile development environment.&lt;/p&gt;

&lt;p&gt;I’m feeling a lot better about our project this week. Last week I still wasn’t sure how far we would get in terms of going mobile. This week, we’ve gotten a lot of our views up and running on mobile and I can definitely see us finishing a demo ready product by July 24.&lt;/p&gt;

&lt;h3 id=&quot;coding-vs-critical-thinking&quot;&gt;Coding vs. Critical Thinking&lt;/h3&gt;
&lt;p&gt;An interesting dynamic I saw with my back-end is the planning time versus the coding time. This reminds me of an article &lt;a href=&quot;http://blog.texmexconsulting.com/clients-do-not-pay-you-for-the-code/&quot; target=&quot;\_blank&quot;&gt;Jesse wrote about writing 10 lines of code for $1000&lt;/a&gt;. I have data and I know what I want to do with it. Before I can write code to tell the computer what I want it to do with the data, I need to structure the data. How do I break down the relationships? What data do I put in which table? These are questions that I have to whiteboard out and spend a significant time thinking about it. The result? Hours of critical thinking and far less than a hundred lines of code. Coding certainly doesn’t happen the way movies portray.&lt;/p&gt;

&lt;h3 id=&quot;more-rails&quot;&gt;More Rails&lt;/h3&gt;
&lt;p&gt;Even though I’m taking a Rails course, I’ve talked more about JavaScript than I have about Rails in my last couple of posts. With interviews happening, I’m realizing how much more there is to learn about Rails. This means that I have been doing lots and lots more reading.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;has_many :through&lt;/code&gt; vs. &lt;code&gt;has_and_belongs_to_many&lt;/code&gt;&lt;br /&gt;
Throughout the course, we’ve basically been fine with &lt;code&gt;belongs_to&lt;/code&gt; and &lt;code&gt;has_many&lt;/code&gt;. Occasionally I’ve had to bust out the &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; but nothing super complicated. Apparently Rails also has a &lt;code&gt;has_many :through&lt;/code&gt; and the like. This allows you to have an intermediate table between relationships.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dependent: :destroy&lt;/code&gt;&lt;br /&gt;
I didn’t realize that destroying a model didn’t automatically destroy its dependents, I’m so spoiled. Good thing Rails makes it easy to implement.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;add_index :table, :foreign_key&lt;/code&gt;&lt;br /&gt;
This one I admit I’m having trouble seeing the value. If I have a relationship between two models using &lt;code&gt;has_many&lt;/code&gt; and &lt;code&gt;belongs_to&lt;/code&gt;, there is already a &lt;code&gt;foreign_key&lt;/code&gt; like &lt;code&gt;user_id&lt;/code&gt; which links the models together. What value does adding an index of that same &lt;code&gt;foreign_key&lt;/code&gt; contribute? I’ll need to dig more into databases for this one.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scope :name, where(attribute: value)&lt;/code&gt;&lt;br /&gt;
I love this one. Jesse very briefly showed this to me when he was helping me with one of my projects but I had since forgotten about it. Being able to define a named scope makes your controller so much cleaner. Nothing is sexier than clean code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;before_save&lt;/code&gt;&lt;br /&gt;
Callbacks allow you to run code based on the life cycle of an object. How did I not use these before?&lt;/p&gt;

&lt;h3 id=&quot;the-talks&quot;&gt;The Talks&lt;/h3&gt;
&lt;p&gt;We have two awesome talks this week. Brian gave us a job talk. If you’ve looked at dev job postings, you know how terrible most of them are. Brian shared with us how to interpret the postings into what they’re really looking and how to target your cover letter. Admittedly, I wish this talk took place before I started apply for jobs :sadface:&lt;/p&gt;

&lt;p&gt;Our second equally awesome talk is from Hesam Panahi from Red Labs, UH’s accelerator arm. For my team, Hesam is coming at a perfect time because we’re very heavily considering a startup. To be able to get an inside look at Houston’s accelerators is exciting.&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Jul 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-10-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-10-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 9 The Iron Yard</title>
        <description>&lt;h3 id=&quot;javascript-is-kind-ofcool&quot;&gt;JavaScript is kind of…cool&lt;/h3&gt;
&lt;p&gt;Okay, I’m really starting to like JS. Rails is awesome but with the current state of web applications, a full Rails app doesn’t produce the kind of UX that’s needed for a serious product. While I wish this wasn’t the case, at least I can still use Rails to be awesome for the back-end. I actually tried Meteor.js and found it super intuitive and easy to use but the part of me that paid to learn Rails won’t let me go on without Rails. Fortunately, we have front-end frameworks and libraries to supplement our Rails back-end.&lt;/p&gt;

&lt;h3 id=&quot;monday&quot;&gt;Monday&lt;/h3&gt;
&lt;p&gt;This is speculation but it looks like we won’t be getting anymore challenges for remainder of the program. This is end of week 9 and the end of our main lecture topics. Since we didn’t get a challenge today, I imagine we won’t be having anymore.&lt;/p&gt;

&lt;p&gt;Today’s lecture is over the super important topics of ecommerce and mailers. Jesse starts with a brief history of internet payments that leads to Stripe. Jesse then shows us how to integrate Stripe payments using the Payola gem. We are then shown how to utilize the built in Rails mailer to send receipts. It’s super awesome how easy Rails makes things. That’s how technology should be, making things easier.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-41&quot; target=&quot;\_blank&quot;&gt;Homework&lt;/a&gt; is optional but…yeah I still did it. Basically we are to make an app that displays products that you can then fake buy with Stripe. Solution: &lt;a href=&quot;http://joey-store-front.herokuapp.com/&quot; target=&quot;\_blank&quot;&gt;Site&lt;/a&gt; | &lt;a href=&quot;https://github.com/joeypoon/store_front&quot; target=&quot;\_blank&quot;&gt;Code&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tuesday--wednesday&quot;&gt;Tuesday &amp;amp; Wednesday&lt;/h3&gt;
&lt;p&gt;So this week is a little different. The next two days actually take place in the commons room because we’re having joint lecture. Jesse and Matt will be creating a web app together. The goal of this joint lecture is to demonstrate some issues you run into working on a distributed project, how to solve them, and best practices.&lt;/p&gt;

&lt;p&gt;The project that Jesse and Matt decided to create is an imgur clone called imgderp. Jesse created the Rails API while Matt developed the front-end with React.js and Backbone.js. This is probably one of my favorite lectures during my time at the Iron Yard. As you know, I have been playing around with different front-end frameworks and libraries. To see someone as experienced as Matt explain and walk us through his thought process on the front-end was tremendously helpful for me. Your mileage may vary, however. I have no doubt that if I didn’t play with React.js just a couple days earlier that I would not have gained as much out of it.&lt;/p&gt;

&lt;p&gt;One of the challenges I had with React.js was routing. Rails makes routing ridiculously easy. Needing to handwrite the logic for routing was a little daunting for me. Matt walked us through the process of routing in Backbone.js and how to proxy the request through the server so that we wouldn’t get CORS errors when connecting to our API. A second challenge I had with React.js was structuring my application in a way that data could flow through parent-child relationships. Witnessing Matt build the front-end of the app from ground up really helped me grasp the structure better.&lt;/p&gt;

&lt;h3 id=&quot;thursday&quot;&gt;Thursday&lt;/h3&gt;
&lt;p&gt;On the agenda today is a revisit from &lt;a href=&quot;/blog/week-3-the-iron-yard/&quot; target=&quot;\_blank&quot;&gt;JB&lt;/a&gt; to do a TDD coding dojo. Kind of. We ended up doing this instead:
&lt;a href=&quot;https://twitter.com/JoeyFPoon/status/616675374177615874&quot; target=&quot;\_blank&quot;&gt;&lt;img src=&quot;https://pbs.twimg.com/media/CI7e-mYW8AMLeH_.jpg&quot; /&gt;&lt;/a&gt;
(Note: Based on how Jesse plays Sheriff of Nottingham, there is a high probability that he runs the blackmarket.)&lt;/p&gt;

&lt;p&gt;Just another day at TIY :). Friday is no class for Independence day, happy 4th all!&lt;/p&gt;

&lt;h3 id=&quot;other-stuff&quot;&gt;Other stuff&lt;/h3&gt;
&lt;p&gt;So I’m sure you’ve noticed, we didn’t have lab this week. We were planning on having a distributed systems project between the front and Rails classes but Jesse and Matt made the executive decision that the scope of the project was probably too large and would take too much time. We are instead to work on our final projects. Yep. That’s right, it’s time for final projects. I still don’t know where the last 9 weeks have gone and it is definitely a bittersweet feeling. Jesse did post an &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/week-9-lab&quot; target=&quot;\_blank&quot;&gt;optional lab&lt;/a&gt; for us which I may work on if I have the time but right now I’m focusing on my final project.&lt;/p&gt;

&lt;p&gt;I am a little scared about the scope of my project. My plan is to develop a mobile app that lets you see and share contact info with those around you. Think meetups and events. It’s entirely possible that two weeks in, I will realize that I’ve dug myself too deep. The Rails part should be pretty simple but creating a mobile app will require a well built front-end wrapped in Cordova or perhaps React native. The basic API and React/Backbone is done already so hopefully the fine-tuning and mobile’fying won’t be too bad. Jesse approved the project so I’m hoping that means that he knows it can be done by demo day.&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Jul 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-9-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-9-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 8 The Iron Yard</title>
        <description>&lt;h3 id=&quot;learning-to-learn&quot;&gt;Learning to learn&lt;/h3&gt;
&lt;p&gt;It’s hard to believe but we are now 2/3s done with Rails Engineering at The Iron Yard. We only have one more month left and so many more things to learn. One of TIY’s sayings is that they teach you how to learn. To this end, I often see Jesse purposely not give a full answer because he wants you to bang your head a little. Make no mistake, you don’t magically learn stuff at The Iron Yard. You have to work for it. On our first day, Jesse was clear that the only way for us to learn enough to become junior dev ready in 12 weeks is to push us just beyond our comfort zone. In recognition of this, I must say, I have learned an amazing amount and I have definitely learned how to learn more efficiently. I mean, I am no &lt;code&gt;React.js&lt;/code&gt; expert but the fact that I can read and understand docs enough to build a working product (albeit simple) within a day is amazing. There is no way I could have reached this point in two months by myself. I love what TIY has helped me accomplish. I am excited what another month at TIY will bring.&lt;/p&gt;

&lt;h3 id=&quot;monday&quot;&gt;Monday&lt;/h3&gt;
&lt;p&gt;We’re still in catch up mode due to our missed days so no challenges for this week either. Today’s lecture is over consuming APIs. Basically, we are shown how to make requests to other people’s APIs and how to process the response. I think the coolest thing is learning about the some of the awesome APIs that are already out there. Jesse showed us the &lt;a href=&quot;http://deckofcardsapi.com/&quot; target=&quot;\_blank&quot;&gt;deckofcardsapi&lt;/a&gt; and you can hear everyone asking in their heads why we made &lt;a href=&quot;/blog/week-2-the-iron-yard-and-my-first-hackathon&quot; target=&quot;\_blank&quot;&gt;blackjack&lt;/a&gt; from scratch. It’s funny how complicated it use to sound when I heard something like, “make an API request.” Now it’s just like, oh it’s just going to a URL and pulling a hash.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-36&quot; target=&quot;\_blank&quot;&gt;Homework&lt;/a&gt; is to deploy a Rails app that will get the 10 most recent Etsy listings using the Etsy API. Solution: &lt;a href=&quot;https://github.com/joeypoon/etsy_api&quot; target=&quot;\_blank&quot;&gt;Code&lt;/a&gt; | &lt;a href=&quot;https://joey-esty-api.herokuapp.com/&quot; target=&quot;\_blank&quot;&gt;Site&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tuesday&quot;&gt;Tuesday&lt;/h3&gt;
&lt;p&gt;Today’s lecture is the meat of the week. Creating an API. Rails maybe a full-stack framework but it is extremely common for it to be used just for back-end. I imagine this is because Rails makes it super easy to create an API server that spits out json data using jbuilder. To demonstrate how to create an API and why we create APIs, we created a &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-37/tree/master/atm&quot; target=&quot;\_blank&quot;&gt;bank ATM API&lt;/a&gt; in class. This ATM API would be able to deposit and withdraw money from a customer’s account securely through use of a token. The main difference between a Rails API and a full-stack Rails app is that you don’t return html to the browser, but json which is really just a hash.&lt;/p&gt;

&lt;p&gt;For &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-37&quot; target=&quot;\_blank&quot;&gt;homework&lt;/a&gt;, we are to create a Rails API which does the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /posts to return all posts
GET /posts/:id gives details of a post
POST /posts creates a post
PUT /posts/:id updates a post
PATCH /posts/:id updates a post
DELETE /posts/:id deletes a post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My &lt;a href=&quot;https://github.com/joeypoon/day-37&quot; target=&quot;\_blank&quot;&gt;solution&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;wednesday&quot;&gt;Wednesday&lt;/h3&gt;
&lt;p&gt;Today is a review day. Jesse went over both using and creating an API by building two separate Rails apps, one for front-end and one for back-end. Our example for this review is an &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-38&quot; target=&quot;\_blank&quot;&gt;application for displaying books and authors&lt;/a&gt;. I know I have the tendency to gloss over reviews in my posts so let me clarify how helpful they actually are. People do not usually learn things the first time they see it. This was what I experienced a lot of when I was self-learning how to program. I would finish a tutorial and be like hah! ezpz. But when I was done, I still had trouble applying it more broadly to build something from scratch. It would take me almost a year before I could even &lt;a href=&quot;/blog/working-efficiently/&quot; target=&quot;\_blank&quot;&gt;start writing something from scratch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s vastly different to go over a scripted tutorial versus seeing a programmer (who has an aptitude for teaching) write something from scratch. You get to see the thought process, the problems that occur and how to solve them, and you get to ask questions right then and there. This has been essential to my rapid growth. Information is far more easily absorbed when I can understand why each step is taken. Even the best tutorials do not do this perfectly. This is especially important when learning something like Rails which makes a lot of assumptions about how you should program and name things. I have spent countless hours trying to figure out why something didn’t work only to realize that I didn’t name it correctly.&lt;/p&gt;

&lt;p&gt;Another vital part of being in a classroom with someone like Jesse is that you learn how to debug. The fact is that your program will almost never work the first time. You need to learn how to figure out what the problem is in a systematic way. Being able to watch Jesse run into problems and how he thinks through them has been essential to my ability to debug.&amp;lt;/rambling&amp;gt;&lt;/p&gt;

&lt;p&gt;Jesse is going to be out for the rest of the week so we get &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/week-8-lab&quot; target=&quot;\_blank&quot;&gt;lab&lt;/a&gt; early this week. This week is our first paired project (kind of…). Each pair is to create an API server and a front-end to request and display that data. The app itself is basically an anonymous messaging board. It’s super cool to see group projects because this will give you a good idea of the workflow when employed as a dev. I imagine the hardest part of this lab for most pairs will simply be to effectively separate tasks/features(Trello is awesome for this) and manage their git repo. However, our Rails Engineering class has 9 people. As Jesse worded it: “Joey, you will not so randomly be working by yourself.” I am a little sad that I won’t be able to experience a paired project yet but also a little happy with his confidence in me. Either way, next week’s lab will be a group project with the front-end class so I’m not too worried about it.&lt;/p&gt;

&lt;p&gt;Another interesting thing about separating the front-end and back-end is that we now have to think slightly differently. We now have to not only think about features but also break those features down into which parts should be back-end and which parts should be front-end. For example, when you log in a user, you need to both authenticate the user and change the UI to reflect that the user has been signed in. So we now have to break the login feature into a back-end user authentication and a front-end rendering of UI. The back-end then has to determine what info they want for authentication and what data do they need to feed back to the front-end. The front-end then has some UI and UX decisions to make with the data that was fed back. I’m glad that we get to start learning to think this way.&lt;/p&gt;

&lt;h3 id=&quot;thursday&quot;&gt;Thursday&lt;/h3&gt;
&lt;p&gt;Jesse is out and I’m doing the lab on my own so I decided to just work from home today. The lab itself calls for a Rails back-end and a Rails front-end but I decided that I wanted to make it a little more interesting by using a JavaScript front-end framework instead, &lt;code&gt;Ember.js&lt;/code&gt;. I did a quick version of the back-end since I knew I would be spending a ton of times in Ember docs. Jesse is huge on Ember.js and I can understand why. Ember-cli makes it very similar to Rails and it took me almost no time to get a semi-working front-end. It took me less than half a day to get Ember to display my posts list, create a post, create a user, and send a request to authenticate a user. The problem came when I had to find a way to do user sessions. Theoretically, I should be able to easily use Ember Data’s &lt;code&gt;DS.store&lt;/code&gt; to hold the session data. I spent an entire day trying to get it to work.&lt;/p&gt;

&lt;p&gt;Matt (Our Houston front-end instructor) gave me a hand and used some expert JS debugging skills to give me a solution but as I continued trying to use Ember, I realized that the session info was not persisting between page reloads. I love the idea of Ember, but I found the docs to be quite outdated. To be fair, I was probably a little too confident with my learning ability to try to learn Ember while our resident Ember.js expert (Jesse) was out. I’m sure if I were more experienced that I could figure it out but there was no way I could finish my lab before the end of the weekend at the pace I was going. And so I made the decision to put Ember on hold and at the advice of Matt, try &lt;code&gt;React.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first thing I can say about React.js is that it has some pretty nice docs. It took me about a day but I was able to implement a basic version of the lab in React. One of the key ideas of React is the use of components. Components are basically custom made HTML elements which enjoys some custom implementations. For example, I can make a &lt;PostForm&gt; component and reuse it. I think of it as I think of Rails partials. The cool thing is that components are a thing in Ember too and I do plan on re-visting Ember again next week. Another key idea of React is that components should be structured in a way that data flows in a linear fashion. Basically, data should only be accessible within parent-child relationships. This was a little tough for me and I ended up cheating by not using React&#39;s &lt;code&gt;setState&lt;/code&gt; but instead using &lt;code&gt;sessionStorage.setItem()&lt;/code&gt;. I think I can fix that by creating an app component and nesting but... time. I&#39;m sure that I&#39;m missing out on a lot of the React.js way of doing things, but here&#39;s my current solution: &lt;a href=&quot;https://github.com/joeypoon/secrets&quot; target=&quot;\_blank&quot;&gt;Code&lt;/a&gt; | &lt;a href=&quot;http://joeypoon.com/secrets/&quot; target=&quot;\_blank&quot;&gt;Site&lt;/a&gt;. The posts may take a second to load in the beginning since my back-end is on Heroku and the server will go to sleep if unused for a period of time. I am super proud of the non-existent load time when creating a new post though :).&lt;/PostForm&gt;&lt;/p&gt;

&lt;h3 id=&quot;friday&quot;&gt;Friday&lt;/h3&gt;
&lt;p&gt;Our guest speaker today is Jeff Reichman from January Advisors. I met Jeff back during the &lt;a href=&quot;/blog/week-2-the-iron-yard-and-my-first-hackathon&quot; target=&quot;\_blank&quot;&gt;3rd annual Houston Hackathon&lt;/a&gt; and he is big on making Houston a better place using technology. He shared with us the some amazing facts about the City of Houston government and how we as devs can help make the city a better place. The City of Houston has a huge amount of data that isn’t being utilized and as devs we are in prime position to help make the data useful.&lt;/p&gt;

&lt;p&gt;I also spotted Efrain, who we had as a speaker during our &lt;a href=&quot;/blog/week-1-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;first week&lt;/a&gt;, in the building so I checked in with him to see how his accelerator experience was going. Apparently he’s in Houston this weekend to meet with some investors. Such cool, much jealous.&lt;/p&gt;

&lt;h3 id=&quot;other-things&quot;&gt;Other things&lt;/h3&gt;
&lt;p&gt;I have to admit that I am loving the things I can do with JavaScript. Looking at my previous Rails apps, they feel kind of clunky in terms of load times. The language itself still hasn’t made much of an impression on me but I definitely can’t live without it anymore.&lt;/p&gt;

&lt;p&gt;So I was asked yesterday about how I organize my Trello boards for projects. I’m still learning and adapting but here’s the &lt;a href=&quot;https://trello.com/b/VkKMuy6X/staple&quot; target=&quot;\_blank&quot;&gt;board&lt;/a&gt; I used for &lt;a href=&quot;/blog/week-7-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;last week’s lab&lt;/a&gt;. It’s terrible and I’m still trying to figure out a systematic way of organizing it but the basic idea is that each card should be a feature. If I think of a feature I want, I add it to the board immediately so I don’t forget it. If I’m in the middle of working on a feature, I don’t stop and switch but just add the idea to the board and finish my current feature card.&lt;/p&gt;

&lt;p&gt;When I implement a feature, I always start with the simplest implementation. In the same way, I usually work on cards in order of simplicity. If I think of something that I feel like the feature should also do, I just add a card. For example, let’s say I want a login form within a modal. Well, that’s really multiple steps:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1: login form
2: form submission
3: processing form request
4: moving the form to a modal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Trello, I would probably make all 4 a separate card. I’m not 100% sure on this since one can argue that a login form automatically means that you will need to have form submission. However, when programming, I would definitely create the form first and make sure that it displays before I worry about the form submission. This is a vital idea since if you implement an entire feature and it doesn’t work, it makes it harder to figure out what part of it is broken. Always get one thing working before you move on to the next part.&lt;/p&gt;

&lt;p&gt;Well, that’s it for this week. As always, if you have any questions or concerns, feel free to tweet &lt;a href=&quot;https://twitter.com/JoeyFPoon&quot; target=&quot;\_blank&quot;&gt;@joeyfpoon&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Jun 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-8-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-8-the-iron-yard</guid>
        
        
      </item>
    
  </channel>
</rss>
