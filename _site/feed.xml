<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog | Joey F. Poon</title>
    <description>A Programmer&#39;s Adventures</description>
    <link>joeypoon.com/blog/</link>
    <atom:link href="joeypoon.com/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 16 Jun 2016 12:38:06 -0500</pubDate>
    <lastBuildDate>Thu, 16 Jun 2016 12:38:06 -0500</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Async requests in React + Redux</title>
        <description>&lt;p&gt;So recently I had the pleasure of integrating React + Redux into an Angular/Rails project at work and I needed to come up with a good way to organize async requests. For some reason I neglected to google at the time to see that there were options like redux-thunk but I’m kind of happy with the result. So without further ado:&lt;/p&gt;

&lt;p&gt;Just a regular request.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// utils/my_util.js
import fetch from &#39;isomorphic-fetch&#39;

export default function myUtil () {
  fetch(‘/my_resource’)
    .then(data =&amp;gt; //dispatch to store with new data)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Include the request and request params in the action.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// action_creators/my_action.js
import myUtil from &#39;../utils/my_util&#39;

export default function myAction (myParam, myParam2) {
  return {
    type: &#39;MY_ACTION&#39;,
    meta: {
      remote: myUtil,
      remoteParams: [myParam, myParam2]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make request with the params if there is a request in the action.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// remote_action_middleware.js
export default store =&amp;gt; next =&amp;gt; action =&amp;gt; {
  if (action.meta &amp;amp;&amp;amp; action.meta.remote) {
    action.meta.remote.apply(this, action.meta.remoteParams || [])
  }
  return next(action);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hook the remote action middleware into the store.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// store.js
import remoteActionMiddleWare from &#39;./remote_action_middleware&#39;
import { createStore, applyMiddleware } from &#39;redux&#39;
import reducer from &#39;./reducer&#39;

const createStoreWithMiddleware = applyMiddleware(
  remoteActionMiddleware
)(createStore)
export const store = createStoreWithMiddleware(reducer)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So basically anytime an action with a remote is created, the async request will automatically be called in the middleware.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jun 2016 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/async-requests-in-react-redux</link>
        <guid isPermaLink="true">joeypoon.com/blog/async-requests-in-react-redux</guid>
        
        
      </item>
    
      <item>
        <title>Understanding the JS ecosystem as a Rubyist (Part 1)</title>
        <description>&lt;h3 id=&quot;these-are-my-confessions&quot;&gt;These are my confessions&lt;/h3&gt;
&lt;p&gt;I have a confession. I have been cheating when it comes to React. I have just been throwing it into my Rails projects. While this works for most of my use cases, it really has just been an excuse to not learn the front-end ecosystem. It’s scary. There are so many words being thrown around when it comes to JS that it can get a little intimidating. Well, I finally sat down and learned what I really need for just the basics.&lt;/p&gt;

&lt;h3 id=&quot;getting-started-with-npm&quot;&gt;Getting started with npm&lt;/h3&gt;
&lt;p&gt;To get started, the first thing you need is npm. npm stands for &lt;strong&gt;N&lt;/strong&gt;ode &lt;strong&gt;P&lt;/strong&gt;ackage &lt;strong&gt;M&lt;/strong&gt;anager and is used for installing JS packages or modules (package and module can be used interchangeably). Packages are like gems. So npm is basically a gem manager. Unlike gems, you have to first initialize your project for npm with &lt;code&gt;$ npm init&lt;/code&gt;. This will create a package.json file which keeps track of the packages you installed in this project. This way, when someone else clones your project, their npm knows what packages to install to make the project run.&lt;/p&gt;

&lt;h3 id=&quot;installing-packages&quot;&gt;Installing Packages&lt;/h3&gt;
&lt;p&gt;After you initialize your project you can install packages using &lt;code&gt;$ npm install packageName&lt;/code&gt;. What this does is install the package to a directory in your project root called node_modules (You should add this to your .gitignore). In addition, if you add the –save flag &lt;code&gt;$ npm install packageName --save&lt;/code&gt;, it will automatically add the package to your package.json file.&lt;/p&gt;

&lt;h3 id=&quot;global-install&quot;&gt;Global install&lt;/h3&gt;
&lt;p&gt;Unlike &lt;code&gt;$ gem install gemName&lt;/code&gt; which is a global install that you can access anywhere, npm install is a local install. You can only use the package in the directory you installed it. If needed, you can add the optional -g flag to save a package globally &lt;code&gt;$ npm install -g packageName&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;scripts&quot;&gt;Scripts&lt;/h3&gt;
&lt;p&gt;In your package.json, you can add npm scripts. These are basically terminal aliases. You can run them using &lt;code&gt;$ npm run scriptName&lt;/code&gt;. An example use case would be for tests &lt;code&gt;$ npm run tests&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// projectRoot/package.json  
{  
  &quot;scripts&quot;: {  
    &quot;scriptName&quot;: &quot;some terminal command&quot;
  }  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s now 1:20 AM so I am going to call it a night here. Stay tuned for part 2!&lt;/p&gt;
</description>
        <pubDate>Thu, 19 May 2016 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/understanding-the-JS-ecosystem</link>
        <guid isPermaLink="true">joeypoon.com/blog/understanding-the-JS-ecosystem</guid>
        
        
      </item>
    
      <item>
        <title>Life After The Iron Yard: Starting a New Career</title>
        <description>&lt;h3 id=&quot;a-look-back&quot;&gt;A look back&lt;/h3&gt;
&lt;p&gt;I think the questions that most programming bootcamp students will have at one point or another can be condensed into:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Is this really worth the money?&lt;/li&gt;
  &lt;li&gt;Will this help me get my foot in the door (read: job)?&lt;/li&gt;
  &lt;li&gt;Is this actually going prepare me for a career in software?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I talked about whether TIY has been worth the money for me during &lt;a href=&quot;/blog/week-6-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;week 6&lt;/a&gt;. And just to make it more quantifiable, I will add that I paid 12k for the course and got a 16k bump in pay. I talked about my process of getting a job during &lt;a href=&quot;/blog/week-10-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;week 10&lt;/a&gt; and &lt;a href=&quot;/blog/week-11-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;week 11&lt;/a&gt;. The third question probably won’t become a concern until later in a bootcamp’s program, likely when imposter syndrome really starts to set in, but it has been a very real concern of mine until recently. Finishing up my second week as a new software engineer, I feel like I can now comfortably provide insight on the last question.&lt;/p&gt;

&lt;h3 id=&quot;fake-it-until-you-become-it&quot;&gt;Fake it until you become it&lt;/h3&gt;
&lt;p&gt;Even when you graduate, you will feel like a fake. Your interviewers will ask you about words and concepts that you have never heard of before. You will think that you bombed. This is normal. The fact is that you cannot know everything and you will not know everything. Don’t be afraid to ask for clarification or for a question to be rephrased. Often times what you’re being asked is simply words that you don’t yet know for something that you’ve been doing for the last 3 months.&lt;/p&gt;

&lt;p&gt;The first question for my very first dev interview was to explain ORMs. Object-relational mapping, sounds super complicated right? Actually, that’s just the theory stuff behind active record and you’ve been using it ever since you’ve learned Rails. I sure as heck didn’t know what it was back then. My answer was terrible and I knew I bombed. To my surprise, I was asked to do a second round interview. I don’t know whether or not I would have gotten through the second round because I had accepted an offer with another company but the point is that you’re not expected to know everything. You will most certainly be expected to be able to learn what’s needed, however.&lt;/p&gt;

&lt;h3 id=&quot;be-teachable&quot;&gt;Be teachable&lt;/h3&gt;
&lt;p&gt;What this means is that it is actually more important for you to show how teachable you are. Considering that you just spent every waking hour for the last 3 months of your life learning how to program, being genuine is probably a good bet. I mean, during my interview with my current employer, I was asked about my experience with AngularJS and complicated data models. I had no experience with AngularJS and my data models have been fairly simple. However, I let them know: I started learning Rails recently and you can see how fast I learn. I made sure to also point out that I learned and implemented React into my Rails project within a weekend.&lt;/p&gt;

&lt;p&gt;The truth is: the intensive time you spend learning at bootcamp is probably more intense than any additional learning you will need for a job. When I looked at the code that I would be responsible for maintaining and improving, it was miles above what I had been working with. The schema was more than 10 times longer than the most complicated schemas that I have built, that’s not even mentioning all the various associations that the models had with each other. But, it doesn’t matter. I learned how to break problems down into smaller problems. I learned how to sequentially step through a program to see what does what. I learned how to learn.&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt;
&lt;p&gt;I didn’t know how to do my job on my first day. I knew how to change that though. I spent my first couple days grinding code school, documentation, and digging through the code base. I was actually able to learn CoffeeScript, AngularJS, and a lot more Rails. As much Rails as we learned in Iron Yard, it’s amazing to see how much more complex Rails actually gets. I was given my first feature to implement on my fourth day and because I knew what to study, I was able to get a basic working version within the day. I had my first code review at the end of my second week and let’s just say that I get to keep my job :wink:&lt;/p&gt;

&lt;p&gt;If you work hard during bootcamp, you will be rewarded. I have zero regrets and I can now confidently say that the Iron Yard has prepared me well for a career in software engineering.&lt;/p&gt;

&lt;h3 id=&quot;other-stuff&quot;&gt;Other stuff&lt;/h3&gt;
&lt;p&gt;In case you’re curious, we are moving ahead with commercializing our final project. Here’s a very bad and outdated &lt;a href=&quot;http://joeypoon.com/admi/&quot; target=&quot;\_blank&quot;&gt;video and landing page&lt;/a&gt;. The API for the mailing list works so you can actually sign up for updates on the project. We’re working on updating the landing page, recording an updated video, and getting a domain. In fact, don’t watch that video until we update it because it looks like crap compared to its current state.&lt;/p&gt;

&lt;p&gt;If you’re curious about the new job, it’s super awesome great. I’ve probably gained a couple pounds from all the free food and I’m constantly caffeinated. It’s terrible, I know, but it’s awesome. They’re super cool and flexible with schedules which is great for vampires like me. They got me a shiny new souped up mac book pro to jam code away on if I want to do a little work remotely. In the office, I get to plug my MBP into a 31 inch monitor with a nice window view of the main street. We actually just had a company party yesterday complete with a smash bros tournament and ridiculously generous raffle prizes. This is how to keep your employees happy. Life is good :smile:&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Aug 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/life-after-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/life-after-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 11 The Iron Yard</title>
        <description>&lt;h3 id=&quot;impending-end-and-beginning&quot;&gt;Impending End and Beginning&lt;/h3&gt;
&lt;p&gt;Time passes far too fast. I honestly can’t believe that my time as an Iron Yard student is coming to an end. It feels like just yesterday that I started learning Ruby. Today, building and deploying full stack Rails apps is an everyday fact. Thanks to Jesse and everyone at the Iron Yard, I can now call myself a software engineer. That’s right, this past week I received and accepted an offer to be a full-time software engineer. It has been a long journey from my first line of html over a year and a half ago. I look forward to what I will learn in the next year and a half.&lt;/p&gt;

&lt;h3 id=&quot;project-update&quot;&gt;Project Update&lt;/h3&gt;
&lt;p&gt;So much sadness and happiness but we’re not quite there yet. With my start date on Monday, we have one less week to finish our final project. Fortunately we made some breakthroughs this week. Look at this beauty:
&lt;img src=&quot;/blog/img/contacts-1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okay, so it still needs tons of styling but most of the features essential for minimum viable product are up and running. An interesting challenge I faced this week is the restructuring of the data models. It was a ton of headache and fun because the most complicated data relationships I’ve had to deal with so far is probably my &lt;a href=&quot;https://joey-staple.herokuapp.com/login&quot; target=&quot;\_blank&quot;&gt;Staple project&lt;/a&gt; from &lt;a href=&quot;/blog/week-7-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;week 7&lt;/a&gt;. Category tags and user follows are easy with gems.&lt;/p&gt;

&lt;p&gt;This is the first time I had to create so many relationships by hand. The hard part isn’t actually writing them, however. The hard part is figuring out the best way to structure your models. Users have contact information and locations that they need to share to other users. Users also need contact lists to store other users and they need to be able to choose what information to share on each share. At one point I tried putting everything in a separate model and it got messy fast. I have since found a happy medium but I still can’t shake the feeling that my tables have too many columns that should be their own tables. Hopefully some time later I can look back at the models and laugh at how silly it is.&lt;/p&gt;

&lt;h3 id=&quot;random-learning&quot;&gt;Random Learning&lt;/h3&gt;
&lt;p&gt;A fairly common thing I see on job listings is the ability to setup a linux server. Wat. Can I just use Heroku? No clue how to linux so I asked Justin. I’m not sure if I have talked about it but Matt is moving up the Iron Yard ladder and Justin from &lt;a href=&quot;/blog/week-2-the-iron-yard-and-my-first-hackathon&quot; target=&quot;\_blank&quot;&gt;week 2 fame&lt;/a&gt; will be taking over Matt’s teaching duties. So anyways, Justin showed me how he hosts his websites and I was like oh. Using linux is basically using terminal. It makes sense why TIY makes us use macs now. Just ssh into your linux box and ftp your Rails app and all is well. Definitely going to try to port some of my Rails apps to digitalocean or something.&lt;/p&gt;

&lt;p&gt;During the interview for my new position, they mentioned that they need Angular.js so I started learning Angular this week. It’s honestly pretty straight forward. You have controllers that you link to your html using directives. I haven’t dug too deep yet but on the surface, it seems easier to understand than React. I still haven’t formed an opinion on which one I like more.&lt;/p&gt;

&lt;h3 id=&quot;the-talks&quot;&gt;The Talks&lt;/h3&gt;
&lt;p&gt;Our speaker this week is a &lt;a href=&quot;/blog/week-2-the-iron-yard-and-my-first-hackathon&quot; target=&quot;\_blank&quot;&gt;revisit&lt;/a&gt; from Daniel @ Stackwave. Daniel’s talk is a deeper look into SQL databases. Daniel went over the basic mathematical premise that powers SQL dbs. He also very succulently explained how certain SQL functions like table joins work. For me, the biggest ohhhhh moment is when he explained entity integrity and referential integrity. I had previously thought that uids and foreign keys were the same thing. This made it difficult to understand the point of something like add_index in Rails. I love listening to smart people.&lt;/p&gt;

&lt;p&gt;My team and I also had the chance to meet with Hesam &lt;a href=&quot;/blog/week-10-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;again&lt;/a&gt; for coffee. We arranged a meet time when we met him last week to get some tips on next steps and focus points for our project if we are to make it commercial. We have been so focused on getting a working product that we completely forgot about some important logistics. Things like time commitments from each member after Iron Yard, equity, and surveying users.&lt;/p&gt;

&lt;p&gt;I believe that Brian also gave a cover letter talk but I wasn’t able to make that one :sadface:.&lt;/p&gt;

&lt;h3 id=&quot;other-stuff&quot;&gt;Other Stuff&lt;/h3&gt;
&lt;p&gt;This upcoming week will be my first week in my new career and demo day. Expect exciting things :).&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Jul 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-11-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-11-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 10 The Iron Yard</title>
        <description>&lt;h3 id=&quot;the-search-begins&quot;&gt;The Search Begins&lt;/h3&gt;
&lt;p&gt;With only 2 weeks remaining, job searching is naturally becoming a larger part of day-to-day life. I had my first interviews this week and boy did I screw up. I’m not sure what happened but I completely blanked out at a simple question like ‘describe your rails experience.’ Fortunately this served as a good wake up call as I performed much better subsequently.&lt;/p&gt;

&lt;p&gt;I also had my first whiteboarding experience. It was both fun and terrifying. It’s great in the sense I get to do what I love during an interview and secondly, I am no longer judged by my resume but my actual coding ability. It is terrifying in the fact that you’re put on the spot without your dev tools. I actually blanked out for what felt like an eternity for one of the whiteboard problems. Practice more Ruby before you interview.&lt;/p&gt;

&lt;h3 id=&quot;project-update&quot;&gt;Project Update&lt;/h3&gt;
&lt;p&gt;Since lectures are over and our remaining time is self-paced final projects, I won’t be going over the days separately. As my project is actually quite large in scope, I’m working in a team of 3. If you’re thinking about attending Iron Yard, I highly recommend doing a team project for your final project as well. My reasoning is that one, you can have a larger and more impressive project. Second, it is great practice for an agile development environment.&lt;/p&gt;

&lt;p&gt;I’m feeling a lot better about our project this week. Last week I still wasn’t sure how far we would get in terms of going mobile. This week, we’ve gotten a lot of our views up and running on mobile and I can definitely see us finishing a demo ready product by July 24.&lt;/p&gt;

&lt;h3 id=&quot;coding-vs-critical-thinking&quot;&gt;Coding vs. Critical Thinking&lt;/h3&gt;
&lt;p&gt;An interesting dynamic I saw with my back-end is the planning time versus the coding time. This reminds me of an article &lt;a href=&quot;http://blog.texmexconsulting.com/clients-do-not-pay-you-for-the-code/&quot; target=&quot;\_blank&quot;&gt;Jesse wrote about writing 10 lines of code for $1000&lt;/a&gt;. I have data and I know what I want to do with it. Before I can write code to tell the computer what I want it to do with the data, I need to structure the data. How do I break down the relationships? What data do I put in which table? These are questions that I have to whiteboard out and spend a significant time thinking about it. The result? Hours of critical thinking and far less than a hundred lines of code. Coding certainly doesn’t happen the way movies portray.&lt;/p&gt;

&lt;h3 id=&quot;more-rails&quot;&gt;More Rails&lt;/h3&gt;
&lt;p&gt;Even though I’m taking a Rails course, I’ve talked more about JavaScript than I have about Rails in my last couple of posts. With interviews happening, I’m realizing how much more there is to learn about Rails. This means that I have been doing lots and lots more reading.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;has_many :through&lt;/code&gt; vs. &lt;code&gt;has_and_belongs_to_many&lt;/code&gt;&lt;br /&gt;
Throughout the course, we’ve basically been fine with &lt;code&gt;belongs_to&lt;/code&gt; and &lt;code&gt;has_many&lt;/code&gt;. Occasionally I’ve had to bust out the &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; but nothing super complicated. Apparently Rails also has a &lt;code&gt;has_many :through&lt;/code&gt; and the like. This allows you to have an intermediate table between relationships.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dependent: :destroy&lt;/code&gt;&lt;br /&gt;
I didn’t realize that destroying a model didn’t automatically destroy its dependents, I’m so spoiled. Good thing Rails makes it easy to implement.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;add_index :table, :foreign_key&lt;/code&gt;&lt;br /&gt;
This one I admit I’m having trouble seeing the value. If I have a relationship between two models using &lt;code&gt;has_many&lt;/code&gt; and &lt;code&gt;belongs_to&lt;/code&gt;, there is already a &lt;code&gt;foreign_key&lt;/code&gt; like &lt;code&gt;user_id&lt;/code&gt; which links the models together. What value does adding an index of that same &lt;code&gt;foreign_key&lt;/code&gt; contribute? I’ll need to dig more into databases for this one.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scope :name, where(attribute: value)&lt;/code&gt;&lt;br /&gt;
I love this one. Jesse very briefly showed this to me when he was helping me with one of my projects but I had since forgotten about it. Being able to define a named scope makes your controller so much cleaner. Nothing is sexier than clean code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;before_save&lt;/code&gt;&lt;br /&gt;
Callbacks allow you to run code based on the life cycle of an object. How did I not use these before?&lt;/p&gt;

&lt;h3 id=&quot;the-talks&quot;&gt;The Talks&lt;/h3&gt;
&lt;p&gt;We have two awesome talks this week. Brian gave us a job talk. If you’ve looked at dev job postings, you know how terrible most of them are. Brian shared with us how to interpret the postings into what they’re really looking and how to target your cover letter. Admittedly, I wish this talk took place before I started apply for jobs :sadface:&lt;/p&gt;

&lt;p&gt;Our second equally awesome talk is from Hesam Panahi from Red Labs, UH’s accelerator arm. For my team, Hesam is coming at a perfect time because we’re very heavily considering a startup. To be able to get an inside look at Houston’s accelerators is exciting.&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Jul 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-10-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-10-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 9 The Iron Yard</title>
        <description>&lt;h3 id=&quot;javascript-is-kind-ofcool&quot;&gt;JavaScript is kind of…cool&lt;/h3&gt;
&lt;p&gt;Okay, I’m really starting to like JS. Rails is awesome but with the current state of web applications, a full Rails app doesn’t produce the kind of UX that’s needed for a serious product. While I wish this wasn’t the case, at least I can still use Rails to be awesome for the back-end. I actually tried Meteor.js and found it super intuitive and easy to use but the part of me that paid to learn Rails won’t let me go on without Rails. Fortunately, we have front-end frameworks and libraries to supplement our Rails back-end.&lt;/p&gt;

&lt;h3 id=&quot;monday&quot;&gt;Monday&lt;/h3&gt;
&lt;p&gt;This is speculation but it looks like we won’t be getting anymore challenges for remainder of the program. This is end of week 9 and the end of our main lecture topics. Since we didn’t get a challenge today, I imagine we won’t be having anymore.&lt;/p&gt;

&lt;p&gt;Today’s lecture is over the super important topics of ecommerce and mailers. Jesse starts with a brief history of internet payments that leads to Stripe. Jesse then shows us how to integrate Stripe payments using the Payola gem. We are then shown how to utilize the built in Rails mailer to send receipts. It’s super awesome how easy Rails makes things. That’s how technology should be, making things easier.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-41&quot; target=&quot;\_blank&quot;&gt;Homework&lt;/a&gt; is optional but…yeah I still did it. Basically we are to make an app that displays products that you can then fake buy with Stripe. Solution: &lt;a href=&quot;http://joey-store-front.herokuapp.com/&quot; target=&quot;\_blank&quot;&gt;Site&lt;/a&gt; | &lt;a href=&quot;https://github.com/joeypoon/store_front&quot; target=&quot;\_blank&quot;&gt;Code&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tuesday--wednesday&quot;&gt;Tuesday &amp;amp; Wednesday&lt;/h3&gt;
&lt;p&gt;So this week is a little different. The next two days actually take place in the commons room because we’re having joint lecture. Jesse and Matt will be creating a web app together. The goal of this joint lecture is to demonstrate some issues you run into working on a distributed project, how to solve them, and best practices.&lt;/p&gt;

&lt;p&gt;The project that Jesse and Matt decided to create is an imgur clone called imgderp. Jesse created the Rails API while Matt developed the front-end with React.js and Backbone.js. This is probably one of my favorite lectures during my time at the Iron Yard. As you know, I have been playing around with different front-end frameworks and libraries. To see someone as experienced as Matt explain and walk us through his thought process on the front-end was tremendously helpful for me. Your mileage may vary, however. I have no doubt that if I didn’t play with React.js just a couple days earlier that I would not have gained as much out of it.&lt;/p&gt;

&lt;p&gt;One of the challenges I had with React.js was routing. Rails makes routing ridiculously easy. Needing to handwrite the logic for routing was a little daunting for me. Matt walked us through the process of routing in Backbone.js and how to proxy the request through the server so that we wouldn’t get CORS errors when connecting to our API. A second challenge I had with React.js was structuring my application in a way that data could flow through parent-child relationships. Witnessing Matt build the front-end of the app from ground up really helped me grasp the structure better.&lt;/p&gt;

&lt;h3 id=&quot;thursday&quot;&gt;Thursday&lt;/h3&gt;
&lt;p&gt;On the agenda today is a revisit from &lt;a href=&quot;/blog/week-3-the-iron-yard/&quot; target=&quot;\_blank&quot;&gt;JB&lt;/a&gt; to do a TDD coding dojo. Kind of. We ended up doing this instead:
&lt;a href=&quot;https://twitter.com/JoeyFPoon/status/616675374177615874&quot; target=&quot;\_blank&quot;&gt;&lt;img src=&quot;https://pbs.twimg.com/media/CI7e-mYW8AMLeH_.jpg&quot; /&gt;&lt;/a&gt;
(Note: Based on how Jesse plays Sheriff of Nottingham, there is a high probability that he runs the blackmarket.)&lt;/p&gt;

&lt;p&gt;Just another day at TIY :). Friday is no class for Independence day, happy 4th all!&lt;/p&gt;

&lt;h3 id=&quot;other-stuff&quot;&gt;Other stuff&lt;/h3&gt;
&lt;p&gt;So I’m sure you’ve noticed, we didn’t have lab this week. We were planning on having a distributed systems project between the front and Rails classes but Jesse and Matt made the executive decision that the scope of the project was probably too large and would take too much time. We are instead to work on our final projects. Yep. That’s right, it’s time for final projects. I still don’t know where the last 9 weeks have gone and it is definitely a bittersweet feeling. Jesse did post an &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/week-9-lab&quot; target=&quot;\_blank&quot;&gt;optional lab&lt;/a&gt; for us which I may work on if I have the time but right now I’m focusing on my final project.&lt;/p&gt;

&lt;p&gt;I am a little scared about the scope of my project. My plan is to develop a mobile app that lets you see and share contact info with those around you. Think meetups and events. It’s entirely possible that two weeks in, I will realize that I’ve dug myself too deep. The Rails part should be pretty simple but creating a mobile app will require a well built front-end wrapped in Cordova or perhaps React native. The basic API and React/Backbone is done already so hopefully the fine-tuning and mobile’fying won’t be too bad. Jesse approved the project so I’m hoping that means that he knows it can be done by demo day.&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Jul 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-9-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-9-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 8 The Iron Yard</title>
        <description>&lt;h3 id=&quot;learning-to-learn&quot;&gt;Learning to learn&lt;/h3&gt;
&lt;p&gt;It’s hard to believe but we are now 2/3s done with Rails Engineering at The Iron Yard. We only have one more month left and so many more things to learn. One of TIY’s sayings is that they teach you how to learn. To this end, I often see Jesse purposely not give a full answer because he wants you to bang your head a little. Make no mistake, you don’t magically learn stuff at The Iron Yard. You have to work for it. On our first day, Jesse was clear that the only way for us to learn enough to become junior dev ready in 12 weeks is to push us just beyond our comfort zone. In recognition of this, I must say, I have learned an amazing amount and I have definitely learned how to learn more efficiently. I mean, I am no &lt;code&gt;React.js&lt;/code&gt; expert but the fact that I can read and understand docs enough to build a working product (albeit simple) within a day is amazing. There is no way I could have reached this point in two months by myself. I love what TIY has helped me accomplish. I am excited what another month at TIY will bring.&lt;/p&gt;

&lt;h3 id=&quot;monday&quot;&gt;Monday&lt;/h3&gt;
&lt;p&gt;We’re still in catch up mode due to our missed days so no challenges for this week either. Today’s lecture is over consuming APIs. Basically, we are shown how to make requests to other people’s APIs and how to process the response. I think the coolest thing is learning about the some of the awesome APIs that are already out there. Jesse showed us the &lt;a href=&quot;http://deckofcardsapi.com/&quot; target=&quot;\_blank&quot;&gt;deckofcardsapi&lt;/a&gt; and you can hear everyone asking in their heads why we made &lt;a href=&quot;/blog/week-2-the-iron-yard-and-my-first-hackathon&quot; target=&quot;\_blank&quot;&gt;blackjack&lt;/a&gt; from scratch. It’s funny how complicated it use to sound when I heard something like, “make an API request.” Now it’s just like, oh it’s just going to a URL and pulling a hash.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-36&quot; target=&quot;\_blank&quot;&gt;Homework&lt;/a&gt; is to deploy a Rails app that will get the 10 most recent Etsy listings using the Etsy API. Solution: &lt;a href=&quot;https://github.com/joeypoon/etsy_api&quot; target=&quot;\_blank&quot;&gt;Code&lt;/a&gt; | &lt;a href=&quot;https://joey-esty-api.herokuapp.com/&quot; target=&quot;\_blank&quot;&gt;Site&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tuesday&quot;&gt;Tuesday&lt;/h3&gt;
&lt;p&gt;Today’s lecture is the meat of the week. Creating an API. Rails maybe a full-stack framework but it is extremely common for it to be used just for back-end. I imagine this is because Rails makes it super easy to create an API server that spits out json data using jbuilder. To demonstrate how to create an API and why we create APIs, we created a &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-37/tree/master/atm&quot; target=&quot;\_blank&quot;&gt;bank ATM API&lt;/a&gt; in class. This ATM API would be able to deposit and withdraw money from a customer’s account securely through use of a token. The main difference between a Rails API and a full-stack Rails app is that you don’t return html to the browser, but json which is really just a hash.&lt;/p&gt;

&lt;p&gt;For &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-37&quot; target=&quot;\_blank&quot;&gt;homework&lt;/a&gt;, we are to create a Rails API which does the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /posts to return all posts
GET /posts/:id gives details of a post
POST /posts creates a post
PUT /posts/:id updates a post
PATCH /posts/:id updates a post
DELETE /posts/:id deletes a post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My &lt;a href=&quot;https://github.com/joeypoon/day-37&quot; target=&quot;\_blank&quot;&gt;solution&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;wednesday&quot;&gt;Wednesday&lt;/h3&gt;
&lt;p&gt;Today is a review day. Jesse went over both using and creating an API by building two separate Rails apps, one for front-end and one for back-end. Our example for this review is an &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-38&quot; target=&quot;\_blank&quot;&gt;application for displaying books and authors&lt;/a&gt;. I know I have the tendency to gloss over reviews in my posts so let me clarify how helpful they actually are. People do not usually learn things the first time they see it. This was what I experienced a lot of when I was self-learning how to program. I would finish a tutorial and be like hah! ezpz. But when I was done, I still had trouble applying it more broadly to build something from scratch. It would take me almost a year before I could even &lt;a href=&quot;/blog/working-efficiently/&quot; target=&quot;\_blank&quot;&gt;start writing something from scratch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s vastly different to go over a scripted tutorial versus seeing a programmer (who has an aptitude for teaching) write something from scratch. You get to see the thought process, the problems that occur and how to solve them, and you get to ask questions right then and there. This has been essential to my rapid growth. Information is far more easily absorbed when I can understand why each step is taken. Even the best tutorials do not do this perfectly. This is especially important when learning something like Rails which makes a lot of assumptions about how you should program and name things. I have spent countless hours trying to figure out why something didn’t work only to realize that I didn’t name it correctly.&lt;/p&gt;

&lt;p&gt;Another vital part of being in a classroom with someone like Jesse is that you learn how to debug. The fact is that your program will almost never work the first time. You need to learn how to figure out what the problem is in a systematic way. Being able to watch Jesse run into problems and how he thinks through them has been essential to my ability to debug.&amp;lt;/rambling&amp;gt;&lt;/p&gt;

&lt;p&gt;Jesse is going to be out for the rest of the week so we get &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/week-8-lab&quot; target=&quot;\_blank&quot;&gt;lab&lt;/a&gt; early this week. This week is our first paired project (kind of…). Each pair is to create an API server and a front-end to request and display that data. The app itself is basically an anonymous messaging board. It’s super cool to see group projects because this will give you a good idea of the workflow when employed as a dev. I imagine the hardest part of this lab for most pairs will simply be to effectively separate tasks/features(Trello is awesome for this) and manage their git repo. However, our Rails Engineering class has 9 people. As Jesse worded it: “Joey, you will not so randomly be working by yourself.” I am a little sad that I won’t be able to experience a paired project yet but also a little happy with his confidence in me. Either way, next week’s lab will be a group project with the front-end class so I’m not too worried about it.&lt;/p&gt;

&lt;p&gt;Another interesting thing about separating the front-end and back-end is that we now have to think slightly differently. We now have to not only think about features but also break those features down into which parts should be back-end and which parts should be front-end. For example, when you log in a user, you need to both authenticate the user and change the UI to reflect that the user has been signed in. So we now have to break the login feature into a back-end user authentication and a front-end rendering of UI. The back-end then has to determine what info they want for authentication and what data do they need to feed back to the front-end. The front-end then has some UI and UX decisions to make with the data that was fed back. I’m glad that we get to start learning to think this way.&lt;/p&gt;

&lt;h3 id=&quot;thursday&quot;&gt;Thursday&lt;/h3&gt;
&lt;p&gt;Jesse is out and I’m doing the lab on my own so I decided to just work from home today. The lab itself calls for a Rails back-end and a Rails front-end but I decided that I wanted to make it a little more interesting by using a JavaScript front-end framework instead, &lt;code&gt;Ember.js&lt;/code&gt;. I did a quick version of the back-end since I knew I would be spending a ton of times in Ember docs. Jesse is huge on Ember.js and I can understand why. Ember-cli makes it very similar to Rails and it took me almost no time to get a semi-working front-end. It took me less than half a day to get Ember to display my posts list, create a post, create a user, and send a request to authenticate a user. The problem came when I had to find a way to do user sessions. Theoretically, I should be able to easily use Ember Data’s &lt;code&gt;DS.store&lt;/code&gt; to hold the session data. I spent an entire day trying to get it to work.&lt;/p&gt;

&lt;p&gt;Matt (Our Houston front-end instructor) gave me a hand and used some expert JS debugging skills to give me a solution but as I continued trying to use Ember, I realized that the session info was not persisting between page reloads. I love the idea of Ember, but I found the docs to be quite outdated. To be fair, I was probably a little too confident with my learning ability to try to learn Ember while our resident Ember.js expert (Jesse) was out. I’m sure if I were more experienced that I could figure it out but there was no way I could finish my lab before the end of the weekend at the pace I was going. And so I made the decision to put Ember on hold and at the advice of Matt, try &lt;code&gt;React.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first thing I can say about React.js is that it has some pretty nice docs. It took me about a day but I was able to implement a basic version of the lab in React. One of the key ideas of React is the use of components. Components are basically custom made HTML elements which enjoys some custom implementations. For example, I can make a &lt;PostForm&gt; component and reuse it. I think of it as I think of Rails partials. The cool thing is that components are a thing in Ember too and I do plan on re-visting Ember again next week. Another key idea of React is that components should be structured in a way that data flows in a linear fashion. Basically, data should only be accessible within parent-child relationships. This was a little tough for me and I ended up cheating by not using React&#39;s &lt;code&gt;setState&lt;/code&gt; but instead using &lt;code&gt;sessionStorage.setItem()&lt;/code&gt;. I think I can fix that by creating an app component and nesting but... time. I&#39;m sure that I&#39;m missing out on a lot of the React.js way of doing things, but here&#39;s my current solution: &lt;a href=&quot;https://github.com/joeypoon/secrets&quot; target=&quot;\_blank&quot;&gt;Code&lt;/a&gt; | &lt;a href=&quot;http://joeypoon.com/secrets/&quot; target=&quot;\_blank&quot;&gt;Site&lt;/a&gt;. The posts may take a second to load in the beginning since my back-end is on Heroku and the server will go to sleep if unused for a period of time. I am super proud of the non-existent load time when creating a new post though :).&lt;/PostForm&gt;&lt;/p&gt;

&lt;h3 id=&quot;friday&quot;&gt;Friday&lt;/h3&gt;
&lt;p&gt;Our guest speaker today is Jeff Reichman from January Advisors. I met Jeff back during the &lt;a href=&quot;/blog/week-2-the-iron-yard-and-my-first-hackathon&quot; target=&quot;\_blank&quot;&gt;3rd annual Houston Hackathon&lt;/a&gt; and he is big on making Houston a better place using technology. He shared with us the some amazing facts about the City of Houston government and how we as devs can help make the city a better place. The City of Houston has a huge amount of data that isn’t being utilized and as devs we are in prime position to help make the data useful.&lt;/p&gt;

&lt;p&gt;I also spotted Efrain, who we had as a speaker during our &lt;a href=&quot;/blog/week-1-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;first week&lt;/a&gt;, in the building so I checked in with him to see how his accelerator experience was going. Apparently he’s in Houston this weekend to meet with some investors. Such cool, much jealous.&lt;/p&gt;

&lt;h3 id=&quot;other-things&quot;&gt;Other things&lt;/h3&gt;
&lt;p&gt;I have to admit that I am loving the things I can do with JavaScript. Looking at my previous Rails apps, they feel kind of clunky in terms of load times. The language itself still hasn’t made much of an impression on me but I definitely can’t live without it anymore.&lt;/p&gt;

&lt;p&gt;So I was asked yesterday about how I organize my Trello boards for projects. I’m still learning and adapting but here’s the &lt;a href=&quot;https://trello.com/b/VkKMuy6X/staple&quot; target=&quot;\_blank&quot;&gt;board&lt;/a&gt; I used for &lt;a href=&quot;/blog/week-7-the-iron-yard&quot; target=&quot;\_blank&quot;&gt;last week’s lab&lt;/a&gt;. It’s terrible and I’m still trying to figure out a systematic way of organizing it but the basic idea is that each card should be a feature. If I think of a feature I want, I add it to the board immediately so I don’t forget it. If I’m in the middle of working on a feature, I don’t stop and switch but just add the idea to the board and finish my current feature card.&lt;/p&gt;

&lt;p&gt;When I implement a feature, I always start with the simplest implementation. In the same way, I usually work on cards in order of simplicity. If I think of something that I feel like the feature should also do, I just add a card. For example, let’s say I want a login form within a modal. Well, that’s really multiple steps:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1: login form
2: form submission
3: processing form request
4: moving the form to a modal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Trello, I would probably make all 4 a separate card. I’m not 100% sure on this since one can argue that a login form automatically means that you will need to have form submission. However, when programming, I would definitely create the form first and make sure that it displays before I worry about the form submission. This is a vital idea since if you implement an entire feature and it doesn’t work, it makes it harder to figure out what part of it is broken. Always get one thing working before you move on to the next part.&lt;/p&gt;

&lt;p&gt;Well, that’s it for this week. As always, if you have any questions or concerns, feel free to tweet &lt;a href=&quot;https://twitter.com/JoeyFPoon&quot; target=&quot;\_blank&quot;&gt;@joeyfpoon&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Jun 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-8-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-8-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 7 The Iron Yard</title>
        <description>&lt;h3 id=&quot;week-of-javascript&quot;&gt;Week of JavaScript&lt;/h3&gt;
&lt;p&gt;This week is the week of the all too essential JavaScript. I can’t say that I’m too fond of the language itself but I can’t deny that you can do some awesome things with JS and that it is a must learn for any web dev. I’m actually teaching myself Ember.js on the side since I plan on using ember-rails-cordova to create a mobile app in my final project. I am really starting to feel the sleep deprivation this week. Having to work while doing TIY is exhausting. Software is never finished and there is never enough time to add and fix everything you want to. I really need to work on getting to sleep earlier.&lt;/p&gt;

&lt;h3 id=&quot;monday&quot;&gt;Monday&lt;/h3&gt;
&lt;p&gt;Today starts our JavaScript adventures. &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-31&quot; target=&quot;\_blank&quot;&gt;Challenge&lt;/a&gt; today is to write a program that will return the worst movie provided a &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-31/blob/master/movies.json&quot; target=&quot;\_blank&quot;&gt;list&lt;/a&gt; of movies. We never formally covered JSON but I imagine Jesse gave a brief explanation on how to read a JSON file in Ruby. I was a little late this morning so I unfortunately missed out on that. Fortunately, JSONs seem simple enough to use. When you look at the file, you can see that it is just a hash so completing the challenge is just a matter of pulling out the right information. &lt;code&gt;movies.json&lt;/code&gt; provides an enormous amount of information so my first step is to use &lt;code&gt;.map&lt;/code&gt; to extract the movie titles and ratings. I can now sort the new mapped array by the ratings and simply return the first movie in the array. My &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-31/challenge.rb&quot; target=&quot;\_blank&quot;&gt;solution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our first JS lecture starts with a brief history on the interwebs. After history, we start playing around in jsbin. Jesse’s philosophy of learning a new language is to draw parallels to your primary language. Such was our lesson. We would write out how to do something in Ruby and then translate it into JavaScript, each time noting the differences. We covered the basics such as &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;function()&lt;/code&gt;, &lt;code&gt;console.log()&lt;/code&gt;, &lt;code&gt;alert()&lt;/code&gt;, and debugging with the inspector. We also briefly touched on &lt;code&gt;underscore.js&lt;/code&gt; which is pretty awesome because it basically gives us access to Ruby methods.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-31&quot; target=&quot;\_blank&quot;&gt;Homework&lt;/a&gt; is a carbon copy of &lt;a href=&quot;/blog/week-1-the-iron-yard/&quot; target=&quot;\_blank&quot;&gt;day 1&lt;/a&gt; but in JavaScript. My &lt;a href=&quot;http://jsbin.com/zifiyemasu/edit?js,console&quot; target=&quot;\_blank&quot;&gt;solution&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tuesday&quot;&gt;Tuesday&lt;/h3&gt;
&lt;p&gt;Uncle (tropical storm)Bill didn’t want us to have class today.
&lt;img src=&quot;/blog/img/hurricane-bill.jpg&quot; alt=&quot;hurricane-bill&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wednesday&quot;&gt;Wednesday&lt;/h3&gt;
&lt;p&gt;Morning challenges are being cancelled for the rest of the week. We’ve now missed 2 days of class due to weather so we’re trying to keep up with the lectures. Straight into lecture we go!&lt;/p&gt;

&lt;p&gt;Today we have jQuery and remote forms in Rails. jQuery makes using JavaScript so much more bearable. Being able to get elements with &lt;code&gt;$(&#39;.className&#39;)&lt;/code&gt; as opposed to &lt;code&gt;document.getElementByClass(&#39;className&#39;)&lt;/code&gt; makes me so much happier. The number of lines of code you save using jQuery over vanilla JS makes me cry salty nerd tears. Remote forms are basically JS forms. The response is provided in JS instead of HTML. This is useful for responsive sites since you don’t have to reload the entire page.&lt;/p&gt;

&lt;p&gt;Tonight’s &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-33&quot; target=&quot;\_blank&quot;&gt;homework&lt;/a&gt; is practice with enumerables in JavaScript. We get to cheat and use &lt;code&gt;underscore.js&lt;/code&gt; since we’re not a JS class 😀. Honestly, I considered just teaching myself to use CoffeeScript since it seems much more intuitive to my brain but I figured that I would need vanilla JS in the future. My &lt;a href=&quot;http://jsbin.com/hepekiteva/edit?js,console&quot; target=&quot;\_blank&quot;&gt;solution&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;thursday&quot;&gt;Thursday&lt;/h3&gt;
&lt;p&gt;Today is mostly a review day. The only real addition is lots of modals and throwing remote forms into modals. Bootstrap is your friend.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/week-7-lab&quot; target=&quot;\_blank&quot;&gt;Lab&lt;/a&gt; this week is building Pinterest using tons of modals and remote forms. The goal is to only refresh on login and on &lt;code&gt;root_path&lt;/code&gt;. I actually planned to speed through this lab and spend the weekend filling my brain with some more &lt;code&gt;Ember.js&lt;/code&gt; but things got complicated fast. I never used Pinterest before but researching Pinterest made me realize that it actually has a ton of features so my Trello board kept getting longer and longer. I found myself rethinking how I want to implement certain features constantly. As a result, I kept backtracking.&lt;/p&gt;

&lt;p&gt;It is funny how some things may seem complicated at first but once you break it down into pieces it eventually comes together. It’s one of the reasons I love programming so much. When I started planning allowing users to favorite posts, I actually ended up taking a loooooong break because the thought of the number of things I need to do just sounded like a lot when I bunched it all together. When I finally sat back down and broke it into pieces it looked simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* need a place to save favorited posts - add column to users table
* need a way to view own favorited posts - add route/action/view
* need to see a user&#39;s favorited posts - add that user&#39;s favorited posts to displayed posts
* repeat some of the above and modify for un-favoriting
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course there was some debugging thrown in but the ability to break problems down into such small pieces is just such an amazing part of coding. Also praise version control. I would be way too scared to make changes to my code without &lt;code&gt;git checkout -b branch_name&lt;/code&gt;. Since I am praising things, &lt;a href=&quot;https://github.com/github/hub&quot; target=&quot;\_blank&quot;&gt;hub&lt;/a&gt; is an awesome addition for git. I’m not entirely happy with the number of features yet but here’s where I’m at currently for my lab: &lt;a href=&quot;https://github.com/joeypoon/staple&quot; target=&quot;\_blank&quot;&gt;code&lt;/a&gt; | &lt;a href=&quot;https://joey-staple.herokuapp.com/&quot; target=&quot;\_blank&quot;&gt;site&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;friday&quot;&gt;Friday&lt;/h3&gt;
&lt;p&gt;Our guest for the week is Darren Ansley. Darren comes to us today with an inspiring story of how he started from humble origins and over the years has become an amazing programmer. It is a great reminder that if you stick to your passion relentlessly, you will succeed.&lt;/p&gt;

&lt;p&gt;With final projects closing in, Martin and I had a little planning session. It’s pretty amazing how much you can learn and the number of ideas you can get from asking others. The current iteration of my final project idea sounds nothing like my initial idea. It will be interesting to see how much more it’ll evolve in the coming weeks.&lt;/p&gt;

&lt;h3 id=&quot;other-things&quot;&gt;Other Things&lt;/h3&gt;
&lt;p&gt;It’s amazing when I look at how much I’ve learned during my time at the Iron Yard. While it’s great that I can build more cool things now, I think what’s more amazing are the skills that I have learned along the way. One of the most important skills I have gained is definitely debugging. I mean it’s almost embarrassing when I look at my old stuff.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/learning-rails&quot; target=&quot;\_blank&quot;&gt;This&lt;/a&gt; for example. I spent an entire day trying to figure out what was going on. When I look at it now, I can only slap myself for my stupidity. It had nothing to do with my JS not loading, I simply needed &lt;code&gt;$(document).ready&lt;/code&gt; since my code was loading before my window was ready. If I had simply used the inspector, I would have seen that my JS was loaded but too early. I hope that I will continue to find the stupidity in my past code 😀.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Jun 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-7-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-7-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 6 The Iron Yard</title>
        <description>&lt;h3 id=&quot;half-way&quot;&gt;Half Way&lt;/h3&gt;
&lt;p&gt;This week marks the half way point of the Houston Iron Yard Rails engineering program, made official with some &lt;a href=&quot;https://twitter.com/matthiasak/status/609347338276986880&quot; target=&quot;\_blank&quot;&gt;BBQ by our very own Dotron&lt;/a&gt;. It is unbelievable that we’re already half-way in. I have been having so much fun that I haven’t really thought about it but it is actually super scary to think about what’s going to happen in 6 weeks. Another 6 weeks from now, we are all going to be working as junior devs or starting our own companies. Will we be ready? The imposter syndrome is strong in us.&lt;/p&gt;

&lt;h3 id=&quot;monday&quot;&gt;Monday&lt;/h3&gt;
&lt;p&gt;Oh noes, a broken app! Our &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-26&quot; target=&quot;\_blank&quot;&gt;challenge&lt;/a&gt; today is to fix it. When you look at it, this challenge is actually really smart. I mean, as a dev, cloning the repo of a broken app and fixing it is probably quite a real and fairly common scenario. It’s also a super good exercise in teaching yourself how to troubleshoot. You clone the repo and check if it runs. It runs but you get a default Rails screen? Okay, check the routes. Routes fixed, what does localhost:3000 show now? Nothing. Okay, let’s follow the route into the controller and corresponding view. Still not working? Let’s see what console/inspector shows. Ah, can’t load bootstrap huh? application.css needs to be renamed application.scss. My &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-26/railsy&quot; target=&quot;\_blank&quot;&gt;solution&lt;/a&gt;. The funny thing about this exercise is that there is barely any coding at all. It’s a good reminder that sometimes what’s broken isn’t necessarily the code but the most obvious thing.&lt;/p&gt;

&lt;p&gt;Agenda for the day:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* Session and Authentication
* has_secure_password
* simple_form
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some super important stuff today. Almost all sites require signing up and signing in so this lesson is vital. It is always cool to see how much fun it is to develop in Rails. Being able to run a secure signup with just a single method &lt;code&gt;has_secure_password&lt;/code&gt; and throwing up a form with just a couple lines of code using &lt;code&gt;gem simple_form&lt;/code&gt; makes using Rails such a joy. It’s funny how grand it sounds when you think of writing code for logging in a user when all we’re doing is something as trivial as setting &lt;code&gt;session[:user_id]&lt;/code&gt;. A great resource on the topic of user sign up is &lt;a href=&quot;https://www.railstutorial.org/book/modeling_users#cha-modeling_users&quot; target=&quot;\_blank&quot;&gt;Chapter 6 of Michael Hartl’s Rails Tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No homework today.&lt;/p&gt;

&lt;h3 id=&quot;tuesday&quot;&gt;Tuesday&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-27&quot; target=&quot;\_blank&quot;&gt;Challenge&lt;/a&gt; today is super hard to finish in fifteen minutes. We basically have to create a super naive version of Twitter. The challenge calls for a single page with a list of all tweets in descending order so I started with &lt;code&gt;rails g controller Posts index&lt;/code&gt;. Since it’s single page, I set the root to the index. Index page on &lt;code&gt;localhost:3000&lt;/code&gt; as expected. Tweets need to be stored somewhere so I went ahead with &lt;code&gt;rails g model Post content:text&lt;/code&gt;. It’s a microblog post so &lt;code&gt;validates length: { maximum: 142 }&lt;/code&gt; in &lt;code&gt;Post.rb&lt;/code&gt; before I forget. Now I need a way to tweet so let’s throw a &lt;code&gt;form_for @post&lt;/code&gt; together. I want to put it at the top index so let’s make it more readable by writing the form in a partial and rendering it in index. Index is broken on localhost due to missing route as expected. Let’s add the needed route for the form&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;post &#39;posts&#39; =&amp;gt; &#39;posts#create&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Localhost now shows missing action posts#create as expected so let’s add a create method in &lt;code&gt;posts_controller.rb&lt;/code&gt;. Now index loads but there’s no tweets showing. Better add &lt;code&gt;Post.all&lt;/code&gt; to the index action and throw an ordered loop into the view. My &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-27/deep_thought&quot; target=&quot;\_blank&quot;&gt;solution&lt;/a&gt;. I’m actually super proud that I finished within the time limit 😎.&lt;/p&gt;

&lt;p&gt;Today’s lecture is over two very awesome gems. Carrierwave and Kaminari. Carrierwave is for image uploading and Kaminari is for pagination. With all the amazing things we have been doing with gems, we now have a joke in class that at the end of the program Jesse will tell us that we can finish our entire app with a single &lt;code&gt;rails g&lt;/code&gt; line.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-27&quot; target=&quot;\_blank&quot;&gt;Homework&lt;/a&gt; today is practicing what we’ve learned these past two days. We are to create an online photo album with login authentication required for uploading. We need a controller with a list of photos so let’s start with &lt;code&gt;rails g controller Photos index&lt;/code&gt;. Let’s set the index to the root path and since we’re in routes, add &lt;code&gt;&#39;/admin&#39; =&amp;gt; &#39;photos#new&#39;, as: :new_photo&lt;/code&gt;. We will need a place to store photos so lets &lt;code&gt;rails g model Photo name&lt;/code&gt; and add Carrierwave to the gemfile and bundle. Carrierwave needs us to run a generator and mount the uploader in the model so let’s do that first.&lt;/p&gt;

&lt;p&gt;The photo index needs to be paginated so let’s add Kaminari to the gemfile and bundle. Run the Kaminari generators and update our controller so that it displays our photos. We need a way to add photos so let’s add a &lt;code&gt;form_tag&lt;/code&gt; to our &lt;code&gt;new&lt;/code&gt; action. Lastly, we need to secure the upload form so let’s add a session controller, User model, and &lt;code&gt;has_secure_password&lt;/code&gt;. I don’t want new User signups so we’ll leave out a users controller and simply create a user in seeds. Solution: &lt;a href=&quot;https://joey-photo-uploader.herokuapp.com/&quot; target=&quot;\_blank&quot;&gt;site&lt;/a&gt; | &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-27/photo_uploader&quot; target=&quot;\_blank&quot;&gt;code&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;wednesday&quot;&gt;Wednesday&lt;/h3&gt;
&lt;p&gt;Our daily &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-28&quot; target=&quot;\_blank&quot;&gt;morning mental stretch&lt;/a&gt; is to, given a database table, write validations for all fields, mount Carrierwave, and add relationships. There’s an added hard mode to write a getter and setter method that returns price in dollars and stores dollars into cents. My &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-28/challenge.rb&quot; target=&quot;\_blank&quot;&gt;solution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lecture for the day:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* dotenv-rails
* carrierwave-aws
* acts_as_follower
* acts_as_taggable_on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Carrierwave, while awesome, stores files locally. This causes problems when you deploy through Heroku and scale beyond one. The simple solution is carrierwave-aws. carrierwave-aws allows you to easily route your Carrierwave images into your S3 account. Amazon S3 requires an access ID and secret key in order to access. As lazy programmers we definitely don’t want to type it out every time so we put it into a &lt;code&gt;.env&lt;/code&gt; file and load it by using &lt;code&gt;gem dotenv-rails&lt;/code&gt;. We can make sure to not commit it into git by adding it to gitignore. However, now Heroku is broken. Git now ignores the &lt;code&gt;.env&lt;/code&gt; file so Heroku doesn’t get a copy. Unfortunately, we have to manually add the keys to &lt;code&gt;Heroku config:set&lt;/code&gt;. On the bright side, it’s not too troublesome.&lt;/p&gt;

&lt;p&gt;acts_as_follower is basically a gem that simplifies the more complex challenge of allowing an object to follow another object. acts_as_taggable_on is the same but for creating category tags.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-28&quot; target=&quot;\_blank&quot;&gt;Homework&lt;/a&gt; is to upgrade yesterday’s homework to use S3 for image storage and add image tagging. Solution: &lt;a href=&quot;http://joey-photo-uploader.herokuapp.com/&quot; target=&quot;\_blank&quot;&gt;site&lt;/a&gt; | &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-27/photo_uploader&quot; target=&quot;\_blank&quot;&gt;code&lt;/a&gt;. Basically it’s integrating carrierwave-aws, dotenv, Heroku environment variables, and acts_as_taggable_on with yesterday’s homework.&lt;/p&gt;

&lt;h3 id=&quot;thursday&quot;&gt;Thursday&lt;/h3&gt;
&lt;p&gt;Our challenge today takes on the familiar form of tests. We are to write code to make these &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-29/blob/master/caffeine/caffeine_tests.rb&quot; target=&quot;\_blank&quot;&gt;tests&lt;/a&gt; pass. The only weird part about the challenge was getting the coffee to return empty after 3 drinks. I decided to do a 0 to 1 scale so subtracting .33 * 3 wasn’t quite 0. I ended up doing an ugly if statement to set the coffee to 0. My &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-28/challenge.rb&quot; target=&quot;\_blank&quot;&gt;solution&lt;/a&gt;. Jesse’s solution used a scale of 0 to 99 which I find to be more elegant.&lt;/p&gt;

&lt;p&gt;Today’s lecture is just review. Our &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/week-6-lab&quot; target=&quot;\_blank&quot;&gt;lab&lt;/a&gt; this week is to recreate Twitter. My solution: &lt;a href=&quot;https://joey-flatter.herokuapp.com&quot; target=&quot;\_blank&quot;&gt;site&lt;/a&gt; | &lt;a href=&quot;https://github.com/joeypoon/flatter&quot; target=&quot;\_blank&quot;&gt;code&lt;/a&gt;. I apologize for not being very descriptive with my thought process for the lab, I’m pretty tired right now but I did leave a nice commit trail 😀.&lt;/p&gt;

&lt;h3 id=&quot;friday&quot;&gt;Friday&lt;/h3&gt;
&lt;p&gt;Our guest speaker today is Mohammad Azam, senior mobile dev at blinds.com. He shared some cool knowledge of iBeacons with us. He also showed us an app he has been working on that notifies you when your luggage has arrived at the terminal. I know I’d pay money for that. Today is also the official half-way point of our program. We celebrated with some BBQ for lunch. Yum yum.&lt;/p&gt;

&lt;h3 id=&quot;other-things&quot;&gt;Other Things&lt;/h3&gt;
&lt;p&gt;My classmates asked me a very interesting question this week - is The Iron Yard worth the money I put into it? This may seem like a strange question coming from someone else who is also currently attending TIY so let me provide some context. TIY is a 0 to 60 program. This means that they have the expectation that you have zero programming knowledge at the start of the bootcamp. There are other types of programming bootcamps. I believe Hack Reactor advertises itself as a 20 to 120 program, for example. I didn’t come into TIY at zero. I had been teaching myself programming for about a year by the time I started Rails engineering at The Iron Yard. I certainly wasn’t anything more than a novice and I certainly wasn’t good enough for a junior dev position but my time in the program so far definitely has not been too head-banging.&lt;/p&gt;

&lt;p&gt;So back to my classmates’ question. Is TIY worth the price for me? Or perhaps more generally, is TIY worth the price for someone who isn’t starting at zero? 100% yes. While I can’t deny that I probably would have been a better fit at something like the Hack Reactor, I have no regrets with choosing TIY’s program. The fact is that while I’m not banging my head, I am solidifying my programming ability. Things that worked but I had no understanding of are now making sense. Things that took hours to build or debug, now only take minutes. The direction I have received from Jesse alone has made my time at TIY invaluable to me. I certainly would not have reached my current level so soon without TIY. Unless you are already junior dev level (then you don’t need a bootcamp at all!), you will most certainly get your money’s worth at The Iron Yard.&lt;/p&gt;

&lt;p&gt;As you’ve probably noticed, I wrote out my thought process a little more for some of the challenges and assignments. I unfortunately didn’t have time to do all of them but let me know what you think. Is it boring? Too many words? Interesting? Tweet me &lt;a href=&quot;https://twitter.com/joeyfpoon&quot; target=&quot;\_blank&quot;&gt;@joeyfpoon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also new family member is settling right in:
&lt;img src=&quot;/blog/img/tiger.jpg&quot; alt=&quot;tiger&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Jun 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-6-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-6-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 5 The Iron Yard</title>
        <description>&lt;h3 id=&quot;databases-oh-my&quot;&gt;Databases, oh my&lt;/h3&gt;
&lt;p&gt;It’s finally time for databases! I have been waiting for this moment. All of my ideas require databases(what doesn’t nowadays?) so I’m super excited to build some awesome database backed projects. Let’s jump right into it.&lt;/p&gt;

&lt;h3 id=&quot;monday&quot;&gt;Monday&lt;/h3&gt;
&lt;p&gt;Our first &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-21&quot;&gt;challenge&lt;/a&gt; of the week is a review on Rails routes. We have to define a routes file that produced a predefined set of urls. My solution &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-21/challenge/config/routes.rb&quot;&gt;here&lt;/a&gt;. Funny thing about the challenge is that everyone in class did a full Rails app when apparently Jesse only wanted a routes file.&lt;/p&gt;

&lt;p&gt;Lecture this week begins with an intro to postgresql and using psql. We went over the most common queries:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table table_name (column data_type, column2 data_type);
insert into table (column, column2) values (value1, value2);
select * from table where column = &#39;value&#39;;
delete from table where column = &#39;value&#39;;
drop table table_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jesse shared with us that this is the first time TIY Houston Rails Engineering is getting lectured over SQL queries. Some students from past cohorts told them that they wished that they had more SQL knowledge. It’s super cool to see them take feedback seriously and I’m glad that I can better understand what calling &lt;code&gt;Model.all&lt;/code&gt; in Rails actually does in the background.&lt;/p&gt;

&lt;p&gt;Homework today is completing &lt;a href=&quot;http://www.sqlcourse.com&quot;&gt;sqlcourse&lt;/a&gt; and creating a script to accomplish &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-21&quot;&gt;this&lt;/a&gt;. My solution is &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-21/sql_assignment.txt&quot;&gt;here&lt;/a&gt;. I’ll note that it’s pretty important to look at your classmates’ solutions after completing it yourself. You’ll sometimes discover better ways to solve the problem. In this case, I learned that I can insert all my cities in the same statement. This would have saved me quite a number of lines.&lt;/p&gt;

&lt;h3 id=&quot;tuesday&quot;&gt;Tuesday&lt;/h3&gt;
&lt;p&gt;Tuesday &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-22&quot;&gt;challenge&lt;/a&gt; is to create a table for storing panda information. After creating the table, we have to write queries that will pull the largest male and largest female panda. My solution &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-22/pandas.txt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lecture today is pretty heavy. We covered multiple tables and joins, ActiveRecord, and migrations. I think now is a good time to mention how important it is to attend meetups even if you don’t fully understand the topic at hand. Last month’s Ruby meetup had Derek Anderson introducing us to his Rails tool &lt;a href=&quot;https://github.com/keredson/ruby-db-evolve&quot;&gt;db:evolve&lt;/a&gt;. db:evolve allows you to update your tables by changing the schema directly. The basic premise is that it takes git diffs of the schema and updates the tables according to the differences. This method is way easier and, in my opinion, more intuitive than creating migrations. We hadn’t even touched Rails when this meetup occurred so my knowledge of the topic at the time was limited at best. Looking back at it, I can now understand how awesome this tool is.&lt;/p&gt;

&lt;p&gt;Homework is to create a &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-22&quot;&gt;blog&lt;/a&gt; (no scaffolding, of course). It’s a basic blog so all it needs is a &lt;code&gt;:title&lt;/code&gt; and &lt;code&gt;:body&lt;/code&gt;. We need to populate the blog with seed data and it should have a working index action and show action. As an addition, we have to add a &lt;code&gt;published_on:date&lt;/code&gt; column using a migration and only display posts that are published. My &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/c52e656019ab2c395d152f7544fd5f59b4bbbb4d/day-22/blog&quot;&gt;solution&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;wednesday&quot;&gt;Wednesday&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-23&quot;&gt;Challenge&lt;/a&gt; for the day is to create a migration to add a column to a table and another migration to remove a column. The challenge itself wasn’t too difficult, but we did get to learn how to deal with typos and such. You can’t just change a migration file that has already been run since Rails will think that it has already run and won’t make apply the changes. You instead have to &lt;code&gt;db:migrate:down VERSION=version_number&lt;/code&gt; first. My solution &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-23/day-23/pins/db/migrate&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We covered forms and validations in lecture today. Jesse first made a form using only HTML, then he used the &lt;code&gt;form_tag&lt;/code&gt;, then he used &lt;code&gt;form_for @model&lt;/code&gt;. It’s pretty interesting to see the different methods as it helps me visualize exactly what &lt;code&gt;form_for&lt;/code&gt; does. I have actually used &lt;code&gt;form_for&lt;/code&gt; in conjunction with a &lt;code&gt;scaffold&lt;/code&gt; in a &lt;a href=&quot;http://joeypoon.com/blog/working-efficiently/&quot;&gt;project&lt;/a&gt; before and had trouble making it work without scaffold. Now I can see that I simply didn’t set up my RESTful actions properly, it’s actually quite embarrassing when I look back at it. For validations, we covered a basic presence and numericality assertion. It’s pretty cool that you can validate input with just a single line. I remember when I &lt;a href=&quot;https://github.com/joeypoon/Summer_FA_Calculator&quot;&gt;manually&lt;/a&gt; did input validations.&lt;/p&gt;

&lt;p&gt;Our &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-23&quot;&gt;homework&lt;/a&gt; today is an add-on to &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-22&quot;&gt;yesterday’s homework&lt;/a&gt;. We have to add the ability to create posts, edit posts, and validate all fields. My &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-22/blog&quot;&gt;solution&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;thursday&quot;&gt;Thursday&lt;/h3&gt;
&lt;p&gt;Sing it with me, lab day~&lt;del&gt;lab day&lt;/del&gt;~. It’s always so exciting to see what awesome project we get to build over the weekend. Anyways, morning &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-24&quot;&gt;challenge&lt;/a&gt; is to write methods into the Buyer model to make the tests pass. This is our first time dealing with tests within a Rails environment so it was actually pretty difficult. I was able to get write a naive solution for checking age but I kept having issues getting the tests to pass. Eventually I noticed that the methods tested end in ? so they should return a boolean. Given our heavy use of assert_equal in the past, my brain automatically thought that the methods should return the string at the end of each test. Silly mistake. My solution &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-24/validity/app/models/buyer.rb&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our last lecture of the week is over table relationships, Heroku, and flash messages. Rails again shows its awesomeness by making relationships easy to manage with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;belongs_to
has_many
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s funny how easy Heroku seems when someone walks you through it. I can’t count the amount of time it took me to deploy my first app on my own.&lt;/p&gt;

&lt;p&gt;Time for weekend fun! &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/week-5-lab&quot;&gt;Lab this week&lt;/a&gt; is to recreate reddit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Normal mode:
* Index of user posted links that are ranked by votes
* Votes increment when a link is clicked
* No downvotes

Hard mode:
* Downvotes
* Add relationships between User and Posts
* Allow selection of User when creating a post
* Validate link uniqueness

Nightmare mode:
* Add User sign-in
* Add testing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Something I noticed when doing this project is that I tend to drift into multiple features at the same time. This leaves me with multiple half finished features and I get lost in thought. I’ve decided to start using Trello to write out features to add. I then work on them one at a time and move them to done as I go. It also helps me not forget features that I want to add. It’s working out pretty well so far.&lt;/p&gt;

&lt;p&gt;One technical problem I had with this project is trying to integrate &lt;code&gt;gem devise&lt;/code&gt; into my project. I found it pretty hard to implement when I didn’t understand what it was doing and I honestly wasn’t very fond of its documentation. I ended up scrapping devise and at the same time, blowing up my project. Not knowing what devise installed made it even harder to remove all its pieces. Thank goodness for git, I just reverted back to my last working version. I still have quite a few features that I want to add to make it more reddit-like but functionality-wise, nightmare mode &lt;a href=&quot;https://github.com/joeypoon/reddit_clone&quot;&gt;solution&lt;/a&gt; is complete (&lt;code&gt;has_secure_password&lt;/code&gt; is awesome). Here’s the &lt;a href=&quot;https://joey-reddit-clone.herokuapp.com&quot;&gt;live version&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;friday&quot;&gt;Friday&lt;/h3&gt;
&lt;p&gt;Our guest for the week is Amanda Shih from OpenStax. Amanda is super active around the Houston tech community and showed us some awesome JS robotics. She actually hooked up a robot that we could control through her server. She then walked us through the setup process. It’s pretty cool to see how simple it is to do something like get a robot to move with some of the tools that are already available.&lt;/p&gt;

&lt;p&gt;Our projects are getting pretty awesome. To be able to build something like Reddit is amazing. To think that just over a month ago we wrote our first loop, it is amazing the amount of ground we have covered in such a short time. Time to get back to work 😀. See you all next week.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Jun 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-5-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-5-the-iron-yard</guid>
        
        
      </item>
    
  </channel>
</rss>
