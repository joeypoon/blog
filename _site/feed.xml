<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog | Joey F. Poon</title>
    <description>A Programmer&#39;s Adventures</description>
    <link>joeypoon.com/blog/</link>
    <atom:link href="joeypoon.com/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 07 Jun 2015 23:26:50 -0500</pubDate>
    <lastBuildDate>Sun, 07 Jun 2015 23:26:50 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Week 5 The Iron Yard</title>
        <description>&lt;h3 id=&quot;databases-oh-my&quot;&gt;Databases, oh my&lt;/h3&gt;
&lt;p&gt;It’s finally time for databases! I have been waiting for this moment. All of my ideas require databases(what doesn’t nowadays?) so I’m super excited to build some awesome database backed projects. Let’s jump right into it.&lt;/p&gt;

&lt;h3 id=&quot;monday&quot;&gt;Monday&lt;/h3&gt;
&lt;p&gt;Our first &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-21&quot;&gt;challenge&lt;/a&gt; of the week is a review on Rails routes. We have to define a routes file that produced a predefined set of urls. My solution &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-21/challenge/config/routes.rb&quot;&gt;here&lt;/a&gt;. Funny thing about the challenge is that everyone in class did a full Rails app when apparently Jesse only wanted a routes file.&lt;/p&gt;

&lt;p&gt;Lecture this week begins with an intro to postgresql and using psql. We went over the most common queries:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table table_name (column data_type, column2 data_type);
insert into table (column, column2) values (value1, value2);
select * from table where column = &#39;value&#39;;
delete from table where column = &#39;value&#39;;
drop table table_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jesse shared with us that this is the first time TIY Houston Rails Engineering is getting lectured over SQL queries. Some students from past cohorts told them that they wished that they had more SQL knowledge. It’s super cool to see them take feedback seriously and I’m glad that I can better understand what calling &lt;code&gt;Model.all&lt;/code&gt; in Rails actually does in the background.&lt;/p&gt;

&lt;p&gt;Homework today is completing &lt;a href=&quot;http://www.sqlcourse.com&quot;&gt;sqlcourse&lt;/a&gt; and creating a script to accomplish &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-21&quot;&gt;this&lt;/a&gt;. My solution is &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-21/sql_assignment.txt&quot;&gt;here&lt;/a&gt;. I’ll note that it’s pretty important to look at your classmates’ solutions after completing it yourself. You’ll sometimes discover better ways to solve the problem. In this case, I learned that I can insert all my cities in the same statement. This would have saved me quite a number of lines.&lt;/p&gt;

&lt;h3 id=&quot;tuesday&quot;&gt;Tuesday&lt;/h3&gt;
&lt;p&gt;Tuesday &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-22&quot;&gt;challenge&lt;/a&gt; is to create a table for storing panda information. After creating the table, we have to write queries that will pull the largest male and largest female panda. My solution &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-22/pandas.txt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lecture today is pretty heavy. We covered multiple tables and joins, ActiveRecord, and migrations. I think now is a good time to mention how important it is to attend meetups even if you don’t fully understand the topic at hand. Last month’s Ruby meetup had Derek Anderson introducing us to his Rails tool &lt;a href=&quot;https://github.com/keredson/ruby-db-evolve&quot;&gt;db:evolve&lt;/a&gt;. db:evolve allows you to update your tables by changing the schema directly. The basic premise is that it takes git diffs of the schema and updates the tables according to the differences. This method is way easier and, in my opinion, more intuitive than creating migrations. We hadn’t even touched Rails when this meetup occurred so my knowledge of the topic at the time was limited at best. Looking back at it, I can now understand how awesome this tool is.&lt;/p&gt;

&lt;p&gt;Homework is to create a &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-22&quot;&gt;blog&lt;/a&gt; (no scaffolding, of course). It’s a basic blog so all it needs is a &lt;code&gt;:title&lt;/code&gt; and &lt;code&gt;:body&lt;/code&gt;. We need to populate the blog with seed data and it should have a working index action and show action. As an addition, we have to add a &lt;code&gt;published_on:date&lt;/code&gt; column using a migration and only display posts that are published. My &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/c52e656019ab2c395d152f7544fd5f59b4bbbb4d/day-22/blog&quot;&gt;solution&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;wednesday&quot;&gt;Wednesday&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-23&quot;&gt;Challenge&lt;/a&gt; for the day is to create a migration to add a column to a table and another migration to remove a column. The challenge itself wasn’t too difficult, but we did get to learn how to deal with typos and such. You can’t just change a migration file that has already been run since Rails will think that it has already run and won’t make apply the changes. You instead have to &lt;code&gt;db:migrate:down VERSION=version_number&lt;/code&gt; first. My solution &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-23/day-23/pins/db/migrate&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We covered forms and validations in lecture today. Jesse first made a form using only HTML, then he used the &lt;code&gt;form_tag&lt;/code&gt;, then he used &lt;code&gt;form_for @model&lt;/code&gt;. It’s pretty interesting to see the different methods as it helps me visualize exactly what &lt;code&gt;form_for&lt;/code&gt; does. I have actually used &lt;code&gt;form_for&lt;/code&gt; in conjunction with a &lt;code&gt;scaffold&lt;/code&gt; in a &lt;a href=&quot;http://joeypoon.com/blog/working-efficiently/&quot;&gt;project&lt;/a&gt; before and had trouble making it work without scaffold. Now I can see that I simply didn’t set up my RESTful actions properly, it’s actually quite embarrassing when I look back at it. For validations, we covered a basic presence and numericality assertion. It’s pretty cool that you can validate input with just a single line. I remember when I &lt;a href=&quot;https://github.com/joeypoon/Summer_FA_Calculator&quot;&gt;manually&lt;/a&gt; did input validations.&lt;/p&gt;

&lt;p&gt;Our &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-23&quot;&gt;homework&lt;/a&gt; today is an add-on to &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-22&quot;&gt;yesterday’s homework&lt;/a&gt;. We have to add the ability to create posts, edit posts, and validate all fields. My &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-22/blog&quot;&gt;solution&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;thursday&quot;&gt;Thursday&lt;/h3&gt;
&lt;p&gt;Sing it with me, lab day~~~lab day~~~. It’s always so exciting to see what awesome project we get to build over the weekend. Anyways, morning &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-24&quot;&gt;challenge&lt;/a&gt; is to write methods into the Buyer model to make the tests pass. This is our first time dealing with tests within a Rails environment so it was actually pretty difficult. I was able to get write a naive solution for checking age but I kept having issues getting the tests to pass. Eventually I noticed that the methods tested end in ? so they should return a boolean. Given our heavy use of assert_equal in the past, my brain automatically thought that the methods should return the string at the end of each test. Silly mistake. My solution &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-24/validity/app/models/buyer.rb&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our last lecture of the week is over table relationships, Heroku, and flash messages. Rails again shows its awesomeness by making relationships easy to manage with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;belongs_to
has_many
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s funny how easy Heroku seems when someone walks you through it. I can’t count the amount of time it took me to deploy my first app on my own.&lt;/p&gt;

&lt;p&gt;Time for weekend fun! &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/week-5-lab&quot;&gt;Lab this week&lt;/a&gt; is to recreate reddit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Normal mode:
* Index of user posted links that are ranked by votes
* Votes increment when a link is clicked
* No downvotes

Hard mode:
* Downvotes
* Add relationships between User and Posts
* Allow selection of User when creating a post
* Validate link uniqueness

Nightmare mode:
* Add User sign-in
* Add testing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Something I noticed when doing this project is that I tend to drift into multiple features at the same time. This leaves me with multiple half finished features and I get lost in thought. I’ve decided to start using Trello to write out features to add. I then work on them one at a time and move them to done as I go. It also helps me not forget features that I want to add. It’s working out pretty well so far.&lt;/p&gt;

&lt;p&gt;One technical problem I had with this project is trying to integrate &lt;code&gt;gem devise&lt;/code&gt; into my project. I found it pretty hard to implement when I didn’t understand what it was doing and I honestly wasn’t very fond of its documentation. I ended up scrapping devise and at the same time, blowing up my project. Not knowing what devise installed made it even harder to remove all its pieces. Thank goodness for git, I just reverted back to my last working version. I still have quite a few features that I want to add to make it more reddit-like but functionality-wise, nightmare mode &lt;a href=&quot;https://github.com/joeypoon/reddit_clone&quot;&gt;solution&lt;/a&gt; is complete (&lt;code&gt;has_secure_password&lt;/code&gt; is awesome). Here’s the &lt;a href=&quot;https://joey-reddit-clone.herokuapp.com&quot;&gt;live version&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;friday&quot;&gt;Friday&lt;/h3&gt;
&lt;p&gt;Our guest for the week is Amanda Shih from OpenStax. Amanda is super active around the Houston tech community and showed us some awesome JS robotics. She actually hooked up a robot that we could control through her server. She then walked us through the setup process. It’s pretty cool to see how simple it is to do something like get a robot to move with some of the tools that are already available.&lt;/p&gt;

&lt;p&gt;Our projects are getting pretty awesome. To be able to build something like Reddit is amazing. To think that just over a month ago we wrote our first loop, it is amazing the amount of ground we have covered in such a short time. Time to get back to work 😀. See you all next week.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Jun 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-5-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-5-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 4 The Iron Yard</title>
        <description>&lt;h3 id=&quot;bittersweet&quot;&gt;Bittersweet&lt;/h3&gt;
&lt;p&gt;It’s the end of my 4th week at TIY and it’s a strange feeling. We’ve gone from variables and arrays on day 1 to creating &lt;a href=&quot;https://github.com/joeypoon/surf_and_rails&quot;&gt;dynamic pages with Rails&lt;/a&gt; in less than 20 class days. With a third of the program now complete, I’m excited about what more I’ll be able to do at the end of the whole program. At the same time, I’m sad to see time passing so quickly. These 4 weeks have been the busiest and yet the most rewarding weeks of my life. It’s a bittersweet feeling. Oh, and I did &lt;a href=&quot;/blog/week-3-the-iron-yard&quot;&gt;eventually&lt;/a&gt; finish our &lt;a href=&quot;https://github.com/joeypoon/surf-and-paddle&quot;&gt;week 3 lab&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;monday&quot;&gt;Monday&lt;/h3&gt;
&lt;p&gt;Memorial day, no class 😢.&lt;/p&gt;

&lt;h3 id=&quot;tuesday&quot;&gt;Tuesday&lt;/h3&gt;
&lt;p&gt;Crazy rain caused some ridiculous flooding and freeways were all closed. Needless to say, TIY was closed too 😢.
&lt;img src=&quot;/blog/img/houston-flood.jpg&quot; alt=&quot;houston-flood-2015&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wednesday&quot;&gt;Wednesday&lt;/h3&gt;
&lt;p&gt;Yay class! I have been so excited for this week to come. It’s Rails week! But before that, &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-16/blob/master/README.md&quot;&gt;challenge&lt;/a&gt;. Nothing too fancy today, just a bit of CSS positioning practice.&lt;/p&gt;

&lt;p&gt;Lecture today is on…Rails! Bet you didn’t see that coming! So excite, much knowledge. Jesse did a quick run through of a basic Rails app with static pages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rails new app_name
rails g controller Pages action1 action2
rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;He talked us through a simple &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-16/tree/master/texas&quot;&gt;Texas Cities site&lt;/a&gt;. During the walkthrough, he also went over routes, the gemfile, and the asset pipeline. No models yet.&lt;/p&gt;

&lt;p&gt;After lunch, we had a review and Jesse ended up doing another talk-through of a &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-16/tree/master/review&quot;&gt;superhero static pages app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Homework is to create a basic Rails app with some pages. I made mine about &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-16&quot;&gt;animals gifs&lt;/a&gt; because why not.
&lt;img src=&quot;/blog/img/dog-pooping.gif&quot; alt=&quot;dog-pooping&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;thursday&quot;&gt;Thursday&lt;/h3&gt;
&lt;p&gt;Today’s &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-17/blob/master/README.md&quot;&gt;challenge&lt;/a&gt; is some Ruby class review. The interesting thing about this challenge is the introduction of &lt;code&gt;class Date&lt;/code&gt; to help us get the age of a person. I have to admit that I got a little cocky when I read challenge. &lt;code&gt;Date.today.year - @dob.year&lt;/code&gt;, ezpz right? Nope. Doesn’t pass the test because I forgot to account for whether the birthday has already passed or not for the current year. I was eventually able to come up with &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-17/person.rb&quot;&gt;this&lt;/a&gt; as a solution. I’m pretty sure this solution doesn’t account for leap years and leap birthdays but our 15 minutes were up 😞.&lt;/p&gt;

&lt;p&gt;What’s not static? That’s right, dynamic! Today’s lecture is on dynamic pages in Rails. Jesse took our &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-16/tree/master/texas&quot;&gt;static Texas cities&lt;/a&gt; app from yesterday and turned it into an app with dynamic pages. Dynamic pages are way cool. We basically deleted all of our views from the static example and were able to make a single view with changing content. This allows us to generate millions of pages for different products, like Amazon does, with just a handful of views. Dynamic routes are awesome too &lt;code&gt; get &#39;/:post_name&#39; =&amp;gt; &#39;pages#show&#39;, as: :post &lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is day 2 of the week but it is still Thursday so of course we still get a &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/week-4-lab&quot;&gt;lab&lt;/a&gt; 😀. We basically have to take our &lt;a href=&quot;https://github.com/joeypoon/surf-and-paddle&quot;&gt;week 3 lab&lt;/a&gt; and turn it into a Rails app with dynamic pages.&lt;/p&gt;

&lt;h3 id=&quot;friday&quot;&gt;Friday&lt;/h3&gt;
&lt;p&gt;Our guest speaker for the week is &lt;a href=&quot;https://twitter.com/robyfitzhenry&quot;&gt;Roby Fitzhenry&lt;/a&gt;. Roby is a self-made entrepreneur and designer who speaks with passion. He shared his personal story with us and inspired us to follow our passion. One especially interesting moment to me was when someone asked Roby about front end vs back end pay. Roby’s response was that you should do whatever you enjoy. If you enjoy it, you’ll keep doing it and eventually you’ll become great at it.&lt;/p&gt;

&lt;p&gt;Roby also explained design in a very human way, simply as a narrative. The most important thing is the story that you are telling. I think that as someone who loves banging away at the keyboard to chip away at technical problems, I sometimes forget what the end goal is. That is that I am building products for humans. How I build and design my applications tell a story to my users. How the story is told is just as important as the story itself. &lt;code&gt;rambling.end&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So I actually finished the lab this week early and submitted it Thursday evening. Jesse, being the awesome instructor that he is, added nightmare mode Friday morning and made a point to let me know. You have to love it when an instructor adjusts for his students 😀. Since we’re doing Rails now, I’ll start adding both production and code links for Rails apps that I deploy. Week 4 lab: &lt;a href=&quot;https://surf-and-rails.herokuapp.com/&quot;&gt;production&lt;/a&gt; | &lt;a href=&quot;https://github.com/joeypoon/surf_and_rails&quot;&gt;code&lt;/a&gt;. It’s not really mobile responsive yet but I do plan on adding that in soon.&lt;/p&gt;

&lt;h3 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h3&gt;
&lt;p&gt;Rails is awesome. Small things like &lt;code&gt;.parameterize&lt;/code&gt; and &lt;code&gt;.pluralize&lt;/code&gt; really make Rails friendly to use. Ruby and Rails might not be the leanest but the ease of use makes it such a joy to program with. In the end, isn’t that what technology is for? To make life easier? It’s exciting to see how far we’ve come in 4 weeks and I definitely can’t wait to see what we’ll be able to produce by the end of 12 weeks. Next week is database stuff, can’t wait!&lt;/p&gt;
</description>
        <pubDate>Sun, 31 May 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-4-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-4-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 3 The Iron Yard</title>
        <description>&lt;h3 id=&quot;long-weekend&quot;&gt;Long Weekend!&lt;/h3&gt;
&lt;p&gt;It’s memorial weekend, yay! Except, I haven’t had a weekend since I started TIY. It doesn’t seem like I’ll have one anytime soon either. I spent all of yesterday trying to migrate out of WordPress. I fixed up my &lt;a href=&quot;http://joeypoon.com&quot;&gt;portfolio&lt;/a&gt; and moved it to Github pages. It loads so much faster now that it brings a tear to my eyes. I was actually planning to write this blog post yesterday but I ended up spending literally an entire day trying to configure my DNS to get my custom domain working. In the end, I was wasting my time because the settings were fine, my hosting provider was just having some issues. Wonderful timing. If you’ve been following my blog, you’ll notice that it looks a little different now too. That’s because I am now blogging with Jekyll and Atom :).&lt;/p&gt;
&lt;pre&gt;nerd_level++&lt;/pre&gt;

&lt;h3 id=&quot;monday&quot;&gt;Monday&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-11/triangle_challenge.rb&quot;&gt;Challenge&lt;/a&gt; today is to determine the type of a triangle given the length of its 3 sides. Starting today, our challenges are supposed to be in a new form. We’re given tests and we write code to make it green. I like this change as it forces us to get use to testing. Honestly, this challenge was a little tough for me. I’m not sure why, but I have been having a strange aversion to if/elsif trees. I kept trying to find some elegant loop solution. After wasting enough time, I still ended up using a bunch of if statements (original solution is commented out). Funny enough, my original solution used more if statements and the logic behind the solution is fuzzy at best. I’ll need to work on that weird mentality of mine. Red, Green, Refactor – not Red, Refactor, Green.&lt;/p&gt;

&lt;p&gt;Lecture today is over testing and some HTML/CSS. Jesse walked us through creating a bowling score calculator with TDD. It is interesting to see how even someone as experienced as Jesse backtracks with solutions. While I like the idea of testing, I don’t think I’ll be as zealous about testing every single method. To me, methods are to break things down into manageable parts. If these parts are small enough, it feels almost pointless to test the smaller methods. I also don’t like the idea of not looking at the problem as a whole and just letting TDD guide you. I find that doing so will sometimes waste time by forcing you to rewrite previous solutions. I do like that TDD forces you to write better(?) code but at the same time I think that looking at the problem at a higher-level can help prevent some rewriting down the road (I have opinions, please don’t grab the pitchforks).&lt;/p&gt;

&lt;p&gt;Homework is additional review on testing. We had to write code to pass the &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-11&quot;&gt;bob_test&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tuesday&quot;&gt;Tuesday&lt;/h3&gt;
&lt;p&gt;Our first HTML/CSS &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-12&quot;&gt;challenge&lt;/a&gt;. The challenge itself is pretty simple, just some practice with HTML and CSS. &lt;a href=&quot;http://codepen.io/joeypoon/pen/XbKOmg&quot;&gt;Challenge result&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today’s lecture is a more in-depth look at HTML and CSS. We were shown the hover element, using background-image + cover, how to tint an image, and SCSS. Not everyone submitted last week’s &lt;a href=&quot;https://github.com/joeypoon/BlackJack&quot;&gt;BlackJack lab assignment&lt;/a&gt; so Jesse didn’t assign any homework so that everyone could have some breathing room.&lt;/p&gt;

&lt;h3 id=&quot;wednesday&quot;&gt;Wednesday&lt;/h3&gt;
&lt;p&gt;Today’s &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/day-13&quot;&gt;challenge&lt;/a&gt; is to recreate a chess board with pure HTML and CSS. No ERB 😢. This challenge definitely made a lot of use out of copy paste. I didn’t get to &lt;a href=&quot;http://codepen.io/joeypoon/pen/VLKvda&quot;&gt;finish&lt;/a&gt; within the time-limit.&lt;/p&gt;

&lt;p&gt;The challenge led perfectly into our lecture topic: Middleman and ERB. (E)mbedded (R)u(B)y allows you to use Ruby within your html file. This is awesome because you no longer need to copy paste 64 divs to make a chess board, just loop. Middleman is interesting because it’s so similar to Rails. Seems almost like Rails integrated Middleman? Asset pipeline and Middleman build is awesome. Use ERB to create your page and just use Middleman build to generate the HTML. We also did review of our lab today. I’m a little guilty of zoning out a little during today’s review but in my defense, I did a lot of reading on Jekyll and Github pages. It’s what inspired me to migrate my blog 😀.&lt;/p&gt;

&lt;p&gt;Homework today is to create a simple website for yourself. It was left as an optional assignment since our review ran a little long. Being inspired by my Jekyll and Github pages reading, I spent pretty much the entire night trying to make a decent looking website. Deploying to Github pages is ridiculously easy with Jekyll. Middleman is pretty easy too with Middleman deploy but Jekyll still wins in ease of use. It makes sense to teach Middleman over Jekyll in class, however, as it provides a perfect entry point for Rails. I probably should have taken a screenshot of how my site looked but I forgot, sorry 😶.&lt;/p&gt;

&lt;h3 id=&quot;thursday&quot;&gt;Thursday&lt;/h3&gt;
&lt;p&gt;Data parsing is today’s &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-14&quot;&gt;challenge&lt;/a&gt;. We have to parse through the Gettysburg address and display the number of times each word appeared, minus common words like “the”. My &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-14&quot;&gt;solution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I got excited because I thought it might lead into a little machine learning. It didn’t 😞. It did lead into cool things you could do with .inject though. I don’t think anyone in class used .inject in their solution so that was interesting to see. The major chunk of today’s lecture was over Git and Github. Jesse went over the basic commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git init
$ git add .
$ git commit -m &quot;Message&quot;
$ git remote add origin url
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;He also showed us what to do if we get stuck in vim or get a merge error. It definitely took me a long time to figure out what was going on the first time I had a merge error or when I forgot my -m so that was useful to learn.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/week-3-lab&quot;&gt;Lab&lt;/a&gt; this week is to recreate a webpage using HTML/CSS and deploy to Github pages using Middleman. Hard-mode includes making the page responsive (No UI frameworks allowed).&lt;/p&gt;

&lt;h3 id=&quot;friday&quot;&gt;Friday&lt;/h3&gt;
&lt;p&gt;This week’s guest speaker is &lt;a href=&quot;https://twitter.com/RookieOne&quot;&gt;Jonathan Birkholz&lt;/a&gt;. JB runs the Houston-JS meetup group and is an all-around outstanding guy. He gave us tons of encouragement and really drove home the point that as developers, we never stop learning. There are always new technologies being invented and new technologies to learn.&lt;/p&gt;

&lt;p&gt;I’m slacking a little on this week’s lab. I haven’t even looked at it yet. I’m way too absorbed in trying to get a decent looking portfolio.&lt;/p&gt;

&lt;h3 id=&quot;confessions&quot;&gt;Confessions&lt;/h3&gt;
&lt;p&gt;I was having some weird moral guilt about &lt;a href=&quot;/blog/week-2-the-iron-yard-and-my-first-hackathon/&quot;&gt;building Houston.Vote&lt;/a&gt; with WordPress. Near the end of the week, I came to terms that this was a silly thing to feel guilty about. We initially tried to use Rails but we decided that we didn’t know it well enough to finish the product within 24 hours. We were 2 weeks into TIY and we’re still learning. So there you have it. We used WordPress. We still got a working &lt;a href=&quot;http://Houston.vote&quot;&gt;website&lt;/a&gt; and I am proud of what we did in 24 hours.&lt;/p&gt;

&lt;p&gt;I also bought a theme for my &lt;a href=&quot;http://joeypoon.com&quot;&gt;portfolio&lt;/a&gt;. I actually don’t feel guilty about this. The fact is that I’m not a designer, nor do I seek to be. I want to develop back-end logic and understand how to do front-end. I could spend days trying to make a decent looking website or I could spend 10 dollars to buy a way better looking theme. I actually did end up spending a ton of time trying to get the theme to work properly but I’d attribute that to my lack of understanding of Jekyll/Middleman. It was a good learning experience on using Jekyll/Middleman so I’m not unhappy about the time I spent. I know now that if I have to apply another theme, I could do it quickly.&lt;/p&gt;

&lt;h3 id=&quot;other-stuff&quot;&gt;Other Stuff&lt;/h3&gt;
&lt;p&gt;I’m still having some trouble getting redirects to work properly so unfortunately some links for my blog might be broken but I’ll hopefully have it working soon™. I really need to get started on my lab. I was suppose to have my blog fully migrated midday yesterday but I’m still not completely done. Better hop to it.
&lt;img src=&quot;/blog/img/goat_flip.gif&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 24 May 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-3-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-3-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Week 2 The Iron Yard and My First Hackathon</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://temp.nickydisla.com/temp/wp-content/uploads/2015/05/hackhou1-e1432449708626.jpeg&quot;&gt;&lt;img src=&quot;http://temp.nickydisla.com/temp/wp-content/uploads/2015/05/hackhou1-e1432449708626.jpeg&quot; alt=&quot;hackhou&quot; class=&quot;aligncenter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Transformation&lt;/h3&gt;
&lt;p&gt;I started dreaming in code a couple months back but it has recently become the dominant form of dreaming for me. I often find myself waking up to arrays and hashes. Earlier this week, I almost asked my girlfriend for an array of what she wanted for dinner so I could call &lt;span class=&quot;lang:ruby decode:true  crayon-inline &quot;&gt;.sample&lt;/span&gt;  on it. Every time she tells me she wants a Corgi, &lt;pre&gt;Corgi.new&lt;/pre&gt; flashes in my head. I find myself unconsciously trying to figure out how to organize daily things into data. I won&#39;t lie, I&#39;m starting to feel a sense of achievement with how nerdy I&#39;m becoming. Just everyday life while attending TIY.&lt;/p&gt;

&lt;h3&gt;Monday&lt;/h3&gt;
&lt;p&gt;Agenda: Lab review, instance variables, and modules. So apparently I completely forgot to mention the fact that most days start off with a challenge. Monday &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-6/day-6-challenge.rb&quot;&gt;challenge&lt;/a&gt;. The goal was to, given an array of arrays of integers (yay English), get the sum of each row and the average of all elements. Seems designed to refresh our memories on enumerators. We are only given 15 minutes for challenges at the end of which we are shown how much more efficient Jesse is at programming. The next thirty minutes or so was spent reviewing our &lt;a href=&quot;https://github.com/joeypoon/week-1-lab&quot;&gt;week 1 lab&lt;/a&gt;. Lecture covering ivars and modules followed. &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-6/day-6.rb&quot;&gt;Homework&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Tuesday&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-7/day-7-challenge.rb&quot;&gt;Challenge&lt;/a&gt;. More reviewing enumerators with some classes thrown in. Lecture today was over...testing! Yay. Hopefully I can start to write &lt;a href=&quot;/blog/on-the-road-to-testing/&quot;&gt;less bad tests&lt;/a&gt;. Second half of lecture was over &lt;span class=&quot;lang:ruby decode:true  crayon-inline &quot;&gt;self&lt;/span&gt;. Today&#39;s assignment was recreating rock, paper, scissors. It was a little tougher than our past homework assignments and had a hard mode. The hardest part for me was thinking of an elegant way to check the winner without writing a huge if tree. I ended up creating a flag attribute and passing in the user&#39;s choice to get the flag value. &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-7&quot;&gt;Homework&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Wednesday&lt;/h3&gt;
&lt;p&gt;Why hello there, Fizzbuzz. We had two challenges this morning, good ole&#39; Fizzbuzz and Palindrome. &lt;a href=&quot;https://github.com/joeypoon/iron_yard/blob/master/day-8/day-8-challenge.rb&quot;&gt;Challenge&lt;/a&gt;. Being able to add methods to pre-existing classes is awesome. Lecture today was over array methods(.pop/.shift, etc.). The main point was that some methods mutate the original array whereas others create a new array. Assignments appear to be getting harder and harder. Today&#39;s assignment was to create a program that assigned secret santas. Creating an algorithm for solving the assignment seemed fairly simple but I kept getting unexpected values. After way too much debugging, I realized that I wasn&#39;t creating a new array with equal values. I was simply pointing two variables to the same array. Derp, all I needed was a &lt;span class=&quot;lang:ruby decode:true  crayon-inline &quot;&gt;.dup&lt;/span&gt;. &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-8&quot;&gt;Homework&lt;/a&gt;. Testing is definitely starting to make a little more sense. The hardest part of TDD for me was knowing what tests to write. Watching Jesse write tests and going through his thought process really helped me understand how I should be thinking. I&#39;m starting to see a difference in the way I approach problems. Having trouble thinking of how to test something? Probably need to rethink your solution.&lt;/p&gt;

&lt;h3&gt;Thursday&lt;/h3&gt;
&lt;p&gt;Lab assignment day! I love lab assignments (yes, I realize this is only my second one). I&#39;m skipping a little ahead though. Can&#39;t forget the challenges. Today&#39;s challenges were quite interesting. Our first challenge was to write a method that could break a dollar amount down into the least possible number of coins (25, 10, 5, and 1 cents) and to display them in an array, including repeats. My first thought was to use modulo to get the number of times a coin could go into the dollar amount and return the remainder. The solution worked but then I tried to add it to the Fixnum class for fun and it went boom.
&lt;img src=&quot;/blog/img/cat_boom.gif&quot; alt=&quot;cat_boom&quot; /&gt;
From what I could tell, it didn&#39;t like me adding ivars into the class? After watching Jesse create his solution, I was able to rework my solution to loop and store the coin denominations into an array directly. Our second challenge was to create a credit card number checker. I never realized that there was maths behind the numbers that determined the validity of the numbers so that was cool to learn. We weren&#39;t actually assigned the second challenge since we spent too much time on the first challenge but my Asian-ness forced me to do it anyways. To check the card numbers we just need to double every other digit in the card, starting from the back, sum every digit together and make sure the total is divisible by 10. A combination of &lt;span class=&quot;lang:ruby decode:true  crayon-inline &quot;&gt;.reverse&lt;/span&gt;, &lt;span class=&quot;lang:ruby decode:true  crayon-inline &quot;&gt;.map&lt;/span&gt;, looping, &lt;span class=&quot;lang:ruby decode:true  crayon-inline &quot;&gt;.reduce(:+)&lt;/span&gt;, and modulo provided a valid solution. &lt;a href=&quot;https://github.com/joeypoon/iron_yard/tree/master/day-9&quot;&gt;Challenges&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today was a little different in that we also had a guest speaker. As soon as we were assigned our lab we crowded into the commons to hear an amazing talk by Justin Richards of Brightblack Data Services. The topic was on natural language processing, machine learning, and Bayes&#39; Theorem. Justin did a quick overview of probability and Bayes&#39; Theorem. He then did a live demo of training a program to rate movie reviews using Python and the NLTK library. I didn&#39;t think I would like data science but this was some pretty awesome stuff. I had to head to work so I unfortunately wasn&#39;t able to stay for everything.&lt;/p&gt;

&lt;h3&gt;Friday&lt;/h3&gt;
&lt;p&gt;Lab for this week is to re-create &lt;a href=&quot;https://github.com/tiy-hou-q2-2015-rails/week-2-lab&quot;&gt;Blackjack&lt;/a&gt;. For this lab I decided to force myself to adhere to TDD and the red, green, refactor cycle by write tests before implementing. I definitely feel like it helped me organize the program better. I think the most challenging part of this assignment (other than knowing what tests to write) was figuring out where to place my methods. For example, should I put my draw function in the &lt;span class=&quot;lang:ruby decode:true  crayon-inline &quot;&gt;class Player&lt;/span&gt; , &lt;span class=&quot;lang:ruby decode:true  crayon-inline &quot;&gt;class Deck&lt;/span&gt;, or &lt;span class=&quot;lang:ruby decode:true  crayon-inline &quot;&gt;class BlackJack&lt;/span&gt;? With a variety of classes, it took a lot of thought to plan out how I wanted the program to flow. A cool feature that I was able to implement was lifetime score tracking through file writing and reading. Even if you close the program and destroy the instance of the game, your score against the dealer would be saved to a file and read back into the game on the next run. &lt;a href=&quot;https://github.com/joeypoon/BlackJack&quot;&gt;BlackJack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Guest speaker today was Daniel Goldman of Stackwave. He talked a little about linked lists, trees, parent-child relationships, and DOM. Daniel is pretty awesome at breaking things down to understandable chunks for us newbies. He also hired two devs from the last TIY cohort so that&#39;s pretty awesome. We also bombarded him with questions about his company so got a lot of startup perspective. Definitely an awesome day.&lt;/p&gt;

&lt;h3&gt;Bonus: First Hackathon!&lt;/h3&gt;
&lt;p&gt;Wow am I tired. I just finished my first Hackathon and it has been an amazing time. I honestly had no idea what to expect when I went to the &lt;a href=&quot;http://houstonhackathon.com/&quot;&gt;3rd annual Houston Hackathon&lt;/a&gt; on Saturday. I was dealing with a serious case of imposter syndrome. I was worried that I wouldn&#39;t be able to contribute. It was supremely helpful to have someone else to share this feeling with and to keep me accountable (looking at you &lt;a href=&quot;https://twitter.com/MartinBee&quot;&gt;@MartinBee&lt;/a&gt;). I met some amazing people in the community and had fun while doing so.&lt;/p&gt;
&lt;p&gt;The event started off with some logistics and a brief speech from Mayor Parker. We had a brief break with some Viet sandwiches and a ridiculous amount of Redbulls. Following the break, people looking for team-members had the chance to pitch their project ideas. This was perfect as I didn&#39;t really have anything in mind. There were some awesome and creative ideas. There were a ton of projects that sounded fun to work on but I was afraid that I wouldn&#39;t be able to contribute to some of the more technically difficult projects at this point in my career (why couldn&#39;t this Hackathon have taken place 6 weeks later :sadface). Fortunately there were so many projects to choose from that this didn&#39;t pose much of an issue.&lt;/p&gt;
&lt;p&gt;I ended up working with an awesome team trying to make voting more fun and engaging (outline of &lt;a href=&quot;http://challengepost.com/software/houston-vote&quot;&gt;project&lt;/a&gt;). Our goal was to allow visitors of the site to get info on why voting is important and to be able to take a pledge through the site. Pledgers choosing to upload a photo would get their picture superimposed with a check(representing a voting checkbox) and name posted on the site. Users would also be able to easily share this pledger&#39;s &quot;badge&quot; through Facebook and Twitter directly through the site. The idea was that this would help keep pledgers accountable and help generate additional exposure. I don&#39;t know if it is because we were all starving from working at full speed but the pizza provided for dinner was amazing. We worked through about 930pm before we split up to get some rest. It looked like a good half of the attendees planned on staying the night.&lt;/p&gt;

&lt;p&gt;Sunday was a race to get the essential features running and scrapping what we couldn&#39;t complete in time. Presentations officially began at noon but we worked through until around 2pm to try to get more features working. You can view the presentations &lt;a href=&quot;https://www.youtube.com/watch?v=UoFE-cWUpjM&quot;&gt;here&lt;/a&gt; (our team presents at about 1:38:40). We spent so much time worrying about our features that we forgot to plan out our presentation. We weren&#39;t able to finish everything we wanted to do but I&#39;m pretty happy with what we were able to do in 24 hours. The site is live and you can visit it here: &lt;a href=&quot;http://houston.vote/&quot;&gt;Houston.Vote&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;This has been an exhausting week. I imagine it isn&#39;t going to get any less tiring anytime soon. Fortunately, it is an awesome kind of tiring. Met some awesome people, built some amazing programs, and learned a bunch of new things. This has definitely been a productive week.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 May 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-2-the-iron-yard-and-my-first-hackathon</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-2-the-iron-yard-and-my-first-hackathon</guid>
        
        
      </item>
    
      <item>
        <title>Week 1 The Iron Yard</title>
        <description>&lt;h3&gt;Changes Abound&lt;/h3&gt;
&lt;p&gt;I told myself that I would blog everyday once I started TIY but I&#39;ve already destroyed that dream. From this past week, it seems that I&#39;ll only be able to manage an update per week at most but I&#39;ll do my best. These last two weeks have been big for me. I started TIY this past Monday and I knew that there was no way I could keep my full-time job while attending so last week was my last at my company. I am now unemployed. Well, I was for a weekend. My company liked &lt;a href=&quot;/blog/working-efficiently/&quot;&gt;my programs&lt;/a&gt; so much that they offered me a part-time position working on their website so I started that position on Monday. I honestly wanted to focus solely on TIY but I certainly can&#39;t turn down getting paid to program, I mean that is the dream right? So anyways, I should stop babbling about my life and talk about TIY.&lt;/p&gt;

&lt;h3&gt;Day 1&lt;/h3&gt;
&lt;p&gt;So Day 1 started with donuts, kolaches, coffee(what day doesn&#39;t?), and introductions. Everyone is super friendly and awesome. We have 19 people total this cohort with 10 in Front-End and 9 in Rails Engineering. Once intros were over, we split up into our classes and dove straight into lecture. For our first lesson, we covered variables, strings, arrays, and hashes. For comparison, I am also taking an intro to CS course at the university and we just barely covered arrays in our final lesson of the semester(yes, it took an entire semester to get to arrays). We get a short break halfway into lecture(have to refill on coffee!). At the end of lecture, we get assigned our homework for the day and then break for lunch. Most of us worked during lunch to complete the homework. Some awesome tacos were provided for lunch. After lunch, we have an as-needed review and lab time. Finishing the pre-work will give you a leg-up on day 1. &lt;a href=&quot;https://gist.github.com/joeypoon/d30e8f4f0da4dc046825&quot;&gt;Day 1 homework&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Day 2&lt;/h3&gt;
&lt;p&gt;Nothing too different on day 2(no lunch though :sadface). On the agenda was enumerables(.map/collect, .reduce/.inject, .select/.reject). &lt;a href=&quot;https://gist.github.com/joeypoon/e0f4d278f38b5092d625&quot;&gt;Day 2 homework&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Day 3&lt;/h3&gt;
&lt;p&gt;Agenda: classes, attributes, methods, inheritance, and a hint of polymorphism with duck typing and method overrides. I think this is probably the equalizing day for most of the students. Even if you do the pre-work, you&#39;ll have to be fairly comfortable with OOP concepts to not feel like banging your head against your keyboard. &lt;a href=&quot;https://gist.github.com/joeypoon/b28b38dfdbe370a933c6&quot;&gt;Day 3 homework&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Day 4&lt;/h3&gt;
&lt;p&gt;Agenda: blocks, gems, and csv parsing. Let the head smashing begin.
&lt;img src=&quot;/blog/img/smashing_head_keyboard.gif&quot; alt=&quot;smashing_head_keyboard&quot; class=&quot;alignnone&quot; /&gt;
Today marks our first lab assignment. The difference between a lab assignment and a homework assignment is simply the scale. A lab is meant to take us the entire weekend to complete. The super awesome thing about our lab is that even if you finish it, there is a hard-mode and nightmare-mode. Who doesn&#39;t love a good challenge? Hard-mode doesn&#39;t necessarily require any new techniques, but it does make you think harder and require a good understanding of topics already covered. Nightmare-mode requires teaching yourself things beyond what was taught in class. For this lab, I had to learn about argument vectors and shebangs in order to complete it. I definitely spent more time trying to figure out how to solve nightmare-mode than writing code. I also learned some mandatory soft-skills from Brian and Jesse(pour over coffee and ping-pong). &lt;a href=&quot;https://github.com/joeypoon/week-1-lab&quot;&gt;Week 1 Lab&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Day 5&lt;/h3&gt;
&lt;p&gt;Fridays are no lecture days. Officially Friday is a lab day, however, we&#39;re supposed to have the occasional guest speaker. Today, we had &lt;a href=&quot;https://twitter.com/Kevin7Christmas&quot;&gt;Kevin Cruz&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/EA_Roa&quot;&gt;Efrain Roa&lt;/a&gt; as guest speakers. Kevin and Efrain are TIY grads who recently got accepted into an accelerator. This was super cool as I am considering trying my hand at a startup after TIY. Hearing their story and encouragement was supremely inspiring. Afterwards, we continued lab time and engaged in group learning. Today was a bit different in that I somehow ended up teaching in front of the class since Jesse had a conference call. Was definitely pretty cool. Stumbled on my words a bit but I definitely felt like it also helped me gain a better understanding.&lt;/p&gt;

&lt;h3&gt;Week 1 Thoughts&lt;/h3&gt;
&lt;p&gt;I find it interesting how this class is structured. Most tutorials I find online typically went data types =&amp;gt; conditionals =&amp;gt; loops =&amp;gt; methods =&amp;gt; classes. We never really formally covered data types and we didn’t even touch if statements until after loops and methods. Not sure what’s more effective but having &lt;a href=&quot;/blog/risky-proposition/&quot;&gt;been teaching myself programming for the past year&lt;/a&gt;, I’m glad that I didn’t have to go through data types in detail again. I think my favorite thing about this experience is the environment. If you’re coming to TIY, you’re probably making a fairly large sacrifice to attend. This creates a level of commitment from the students that I generally don’t see at the university level. Being surrounded by people that are so committed to learning makes learning more awesome and wayyyyy faster.&lt;/p&gt;

&lt;p&gt;TLDR: TIY is awesome, the people are awesome, do it.&lt;/p&gt;
</description>
        <pubDate>Sat, 09 May 2015 00:00:00 -0500</pubDate>
        <link>joeypoon.com/blog/week-1-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/week-1-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>Demystifying Rails</title>
        <description>&lt;p&gt;It’s been a busy week at work. I mean, look at how sad this &lt;a href=&quot;https://github.com/joeypoon&quot;&gt;past week&lt;/a&gt; was. Fortunately, I was able to get my code on this weekend. I took a slight detour from Rails previously to brush up on my Ruby and am now back at Rails. It is so much easier to understand Rails when you know some Ruby. Things are definitely sticking better this time around. Some awesome things I was able to learn this weekend:&lt;/p&gt;

&lt;h3&gt;Sass&lt;/h3&gt;
&lt;p&gt;Okay, this isn’t specifically Rails but it’s still awesome. Syntactically awesome stylesheets could not be a more appropriate name. Being so use to nesting and variables, it definitely felt like hassle at times trying to write plain css. Yay for Sass!&lt;/p&gt;

&lt;h3&gt;Partials&lt;/h3&gt;
&lt;p&gt;There is just something so satisfying about breaking down chunky looking code into smaller chunks. Partials are welcome in my code any day. Hopefully I can commit another naming convention to memory (chanting: _partial _partial _partial).&lt;/p&gt;

&lt;h3&gt;Paths&lt;/h3&gt;
&lt;pre&gt;get &#39;some_page&#39; =&amp;gt; &#39;controller#action&#39;&lt;/pre&gt;
&lt;p&gt;I’ve been wondering for a while how to customize urls so learning about paths in Rails was happy times.&lt;/p&gt;

&lt;h3&gt;Asset Pipeline&lt;/h3&gt;
&lt;pre&gt;rails new my_app&lt;/pre&gt;
&lt;p&gt;creates so many things that understanding where things were took a while. Learning about the asset pipeline was definitely a relief. Having the manifest include everything in the directory is so convenient.&lt;/p&gt;

&lt;h3&gt;Tests&lt;/h3&gt;
&lt;p&gt;I have been trying to write &lt;a href=&quot;/blog/on-the-road-to-testing/&quot;&gt;my own tests&lt;/a&gt; and doing a &lt;a href=&quot;https://github.com/joeypoon/Summer_FA_Calculator&quot;&gt;terrible job&lt;/a&gt;. Rails makes testing so much easier. I’m just starting to grasp the amazing things I can do with&lt;/p&gt;
&lt;pre&gt;rake test&lt;/pre&gt;
&lt;p&gt;but I definitely feel like I’m getting closer to TDD. Thank you&lt;/p&gt;
&lt;pre&gt;validates&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;assert&lt;/pre&gt;

&lt;h3&gt;Regex&lt;/h3&gt;
&lt;p&gt;Okay, I honestly still don’t get regex. I’ve had to use regex in a couple of solutions before but I was able to find a suitable answer online so I didn’t bother learning how to write one on my own. I’m going to do it this time. I promise!&lt;/p&gt;

&lt;p&gt;What a great weekend :).&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Apr 2015 22:32:24 -0500</pubDate>
        <link>joeypoon.com/blog/demystifying-rails</link>
        <guid isPermaLink="true">joeypoon.com/blog/demystifying-rails</guid>
        
        
      </item>
    
      <item>
        <title>My Journey to the Iron Yard</title>
        <description>&lt;p&gt;&lt;a href=&quot;/blog/img/tiy-austin.jpg&quot;&gt;&lt;img src=&quot;/blog/img/tiy-austin.jpg&quot; alt=&quot;iron-yard&quot; class=&quot;alignnone&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As May the Fourth approaches (what a wonderful coincidence), I find myself unable to contain my excitement for &lt;a href=&quot;http://theironyard.com/courses/&quot;&gt;the Iron Yard&lt;/a&gt;. So instead of imploding, I have decided to write about it.&lt;/p&gt;

&lt;h3 id=&quot;the-beginning&quot;&gt;The Beginning&lt;/h3&gt;
&lt;p&gt;Less than two years ago, I was &lt;a href=&quot;/blog/a-new-love/&quot;&gt;studying for law school&lt;/a&gt;. Today, I don’t know where my LSAT practice books are and instead I find myself &lt;a href=&quot;/blog/everyone-should-learn-to-program/&quot;&gt;writing programs for work and for fun&lt;/a&gt;. When I first started learning how to program, I scoured the internet for resources and devoured them. After a while, I felt like my learning had slowed down. I finished &lt;a href=&quot;http://www.codecademy.com/learn&quot;&gt;Codecademy&lt;/a&gt; and some books from Big Nerd Ranch but I still felt lost when I tried to create something from scratch. I began looking into different options.&lt;/p&gt;

&lt;h3&gt;The Fork With One Road&lt;/h3&gt;
&lt;p&gt;One of the first options that came up was to attend a programming bootcamp. The mere idea of an intensive full-time programming bootcamp excited me. Unfortunately, it was not financially feasible for me at the time so I begrudgingly crossed it off my list of possibilities. I had already finished my Bachelor degree so the next logical step would have been a Master program. My degree was non-technical, however, so the number of pre-reqs I needed to start graduate level courses meant an addition two years on top of the degree length. With this in mind, I resigned myself to getting a second Bachelor. I might as well get a degree if I have to take the pre-reqs right? What was I to do? I ran into what felt like an insurmountable wall just trying to self-learn.&lt;/p&gt;

&lt;h3&gt;Flames Reignited&lt;/h3&gt;
&lt;p&gt;Time passed and classes started. It would take me a while to get my degree but I didn’t feel like I had any other options. Some things happened and my girlfriend ended up moving in with me. I didn’t think much of it at the time. One day my now routine googling for programming resources led me to an article that talked about different types of education options for aspiring developers. One of the options was of course the programming bootcamp. I followed the link and ended up with a list of programming bootcamps. I glance over some. They were nice and exciting but most of them were in SF and NY which made them far too expensive due to additional living costs. Out of curiosity, I did a control+f for Houston to see if there were any nearby. To my surprise, I found the Iron Yard.&lt;/p&gt;

&lt;h3&gt;The Awesomeness&lt;/h3&gt;
&lt;p&gt;With TIY being in town, this cut the cost of attendance significantly. This is further compounded by my now reduced living expenses since my girlfriend shared living costs with me. For the first time, programming bootcamp seemed like a possibility. Being the awesome girlfriend that she is, Nicky told me that she would support my decision if I decided to quit my job and attend TIY. I had no more excuses. I emailed Brian to set up a visit and the rest is &lt;a href=&quot;/blog/risky-proposition/&quot;&gt;history&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Excitement&lt;/h3&gt;
&lt;p&gt;I thought I was excited when I first realized that I could actually attend TIY, however, I am somehow still getting more excited by the day. I stopped by TIY this past Wednesday for their crash course and I was reminded of why I wanted to go to TIY. Sure you could take your time to learn this stuff at home but I’m just as excited about the atmosphere and the people as I am about the learning. Let the countdown begin!&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Apr 2015 13:35:28 -0500</pubDate>
        <link>joeypoon.com/blog/my-journey-to-the-iron-yard</link>
        <guid isPermaLink="true">joeypoon.com/blog/my-journey-to-the-iron-yard</guid>
        
        
      </item>
    
      <item>
        <title>On The Road To Testing</title>
        <description>&lt;p&gt;So after &lt;a href=&quot;/blog/refactoring-complete/&quot;&gt;refactoring&lt;/a&gt;, I decided to try my hand at testing. Realistically, I probably should have written tests before I even started writing the &lt;a href=&quot;https://github.com/joeypoon/Summer_FA_Calculator&quot;&gt;program&lt;/a&gt; but I was fortunate enough that I had a &lt;a href=&quot;/blog/working-efficiently/&quot;&gt;bunch of actual test cases&lt;/a&gt; that I could use as I went along. However, doing it the way I did definitely helped me realize the value of TDD. I&#39;m sure that Rails has some handy tools for testing but I figured I would try to learn things from the ground up. I know I&#39;m still doing a bunch of things incorrectly but it has definitely been a journey.&lt;/p&gt;

&lt;h3&gt;Classes&lt;/h3&gt;
&lt;p&gt;So the first thing I tried doing was to write a test class. I currently only have a single class handling the calculations for the program(I do think breaking it down into more classes would be much better but I haven&#39;t had a chance yet) so I just made my test class a subclass of it:
&lt;span class=&quot;lang:ruby decode:true  crayon-inline &quot;&gt;class testing &amp;lt; AidCalculations&lt;/span&gt;.
I&#39;m sure many of you have spotted the problem already. I spent a good 30 minutes googling around before I learned that all I needed was to make it:
&lt;span class=&quot;lang:ruby decode:true  crayon-inline &quot;&gt;class Testing &amp;lt; AidCalculations&lt;/span&gt;.
I see what people mean when they say that conventions are important. I then spent the next hour renaming my variables and method names.&lt;/p&gt;

&lt;h3&gt;attr_accessor&lt;/h3&gt;
&lt;p&gt;Since the program took input through the command line and stored them in ivars, I figured that I would simply create random values and store them in the ivars. This led me to reading about attr_accessor. Cool, I&#39;ll just toss in some attr_accessors and we&#39;re done. Explosions. Undefined method for nil. What? Okay, let me initialize the variables with 0 and see if that changes anything. Armageddon. How is my variable still nil? Sprinkle some google and set the timer for 30 minutes and ding! ivars are not inherited. Time to erase all the work I&#39;ve done for the last 2 hours. At least I got some knowledge out of that, right?&lt;/p&gt;
&lt;h3&gt;Backtracking&lt;/h3&gt;
&lt;p&gt;I briefly considered using class variables instead of ivars but my gut(please correct me if I&#39;m wrong) was telling me not to. I read so much about OOP being about hiding stuff that making my variables more accessible just felt like I was throwing together a hack. I decided instead to backtrack. I deleted Testing and threw the methods into AidCalculations. While my brain was on the topic of hiding implementation details, I decided to also go ahead and throw everything I could into private. This is what I ended up with on the public side:&lt;/p&gt;
&lt;pre class=&quot;minimize:true tab-convert:true tab-size:2 lang:ruby decode:true &quot;&gt;class AidCalculations

def test
test_tasfa
test_dependency_status
test_grade_level
test_old_budget
test_old_efc
test_pell_efc
test_sap_status
if is_sap
  exit
end
test_fs_pell
test_fs_sub
test_fs_unsub
test_fall_enrollment
test_spring_enrollment
test_pell_leu
test_total_sub_borrowed
test_total_unsub_borrowed
set_total_loans_borrowed
test_summer_budget
set_new_budget
test_new_efc
set_summer_efc

calculate_awards
display_awards
display_stats
end

def ask_sap
begin
  puts &quot;\nPlease enter SAP status (good/bad): &quot;
  @sap_status = gets.chomp
end until @sap_status == &quot;good&quot; || @sap_status == &quot;bad&quot;
end

def is_sap
if @sap_status == &quot;bad&quot;
  puts &quot;***Please review Summer application after student&#39;s SAP is reviewed***&quot;
  return true
else
  return false
end
end

def get_info
ask_tasfa
ask_dependency_status
ask_old_budget
ask_old_efc

if @tasfa == &quot;n&quot;
  ask_pell_efc
  ask_fs_pell
  ask_fs_sub
  ask_fs_unsub
end

ask_fall_enrollment
ask_spring_enrollment

if @tasfa == &quot;n&quot;
  ask_leu
  ask_total_sub_borrowed
  ask_total_unsub_borrowed
  set_total_loans_borrowed
  check_leu
  check_loan_limits
end

check_enrollment
ask_summer_budget
#student.set_new_budget  #optional

ask_new_efc
check_efc
set_summer_efc
ask_grade_level
end

def calculate_awards
max_mdtu = 1500
if @tasfa == &quot;n&quot;
  calculate_pell
  calculate_mdtus
  set_annual_loan_limits
  calculate_sub
  calculate_unsub
  set_total_awards
  check_over_summer_budget
else
  @mdtut = max_mdtu
end
end

def display_awards
if @tasfa == &quot;n&quot;
  puts &quot;\nPell: &quot; + @pell_award.to_s
  puts &quot;MDTUS: &quot; + @mdtus.to_s
  puts &quot;Sub Loans: &quot; + @sub_award.to_s
  puts &quot;Unsub Loans: &quot; + @unsub_award.to_s
else
  puts &quot;MDTUT: &quot; + @mdtut.to_s
end
end

def display_roausdf
puts &quot;\n***Please input in ROAUSDF: LEU, Summer hours, budget, and EFC***&quot;
puts &quot;\nLEU: &quot; + @pell_leu.to_s + &quot; \nSummer budget: &quot; + @summer_budget.to_s + &quot; \nSummer EFC: &quot; + @summer_efc.to_s
end

def display_stats
puts &quot;\nFill out sum app form: &quot;
puts &quot;SAP: &quot; + @sap_status.to_s + &quot;\nFall + Spring Pell: &quot; + @fs_pell.to_s + &quot;\nNew Budget: &quot; + @new_budget.to_s + &quot;\nOld Budget: &quot; + @old_budget.to_s + &quot;\nSummer Budget: &quot; + @summer_budget.to_s + &quot;\nNew EFC: &quot; + @new_efc.to_s + &quot;\nOld EFC: &quot; + @old_efc.to_s + &quot;\nSummer EFC: &quot; + @summer_efc.to_s + &quot;\nSummer Pell: &quot; + @pell_award.to_s + &quot;\nSummer Sub: &quot; + @sub_award.to_s + &quot;\nSummer Unsub: &quot; + @unsub_award.to_s + &quot;\nMDTUS: &quot; + @mdtus.to_s + &quot;\nMDTUT: &quot; + @mdtut.to_s
end

private&lt;/pre&gt;
&lt;h3&gt;Yay, Learning!&lt;/h3&gt;
&lt;p&gt;I definitely learned a ton of things by building this application from scratch. It just feels so different when you&#39;re not following a tutorial. The amount of joy and satisfaction you get when your program works is just so much sweeter. Some other note worthy things from this journey: I gained a TON of experience reading error messages and I learned how little I truly understand about OOP(So much to read, so little time). I imagine this application will be completely restructured and more intuitive when I learn to deploy it using Rails (Can&#39;t wait to start Iron Yard!). For now, I&#39;m just happy that my crude implementation works:&lt;/p&gt;
&lt;pre class=&quot;minimize:true tab-convert:true tab-size:2 lang:ruby decode:true &quot;&gt;require_relative &quot;aid_calculations&quot;

puts &quot;Enter 1 to continue or press any other key to exit.&quot;
action = gets.chomp

while action == &quot;test&quot;
student = AidCalculations.new
student.test

puts &quot;\nEnter 1 to continue or press any other key to exit&quot;
action = gets.chomp
end

while action == &quot;1&quot;

student = AidCalculations.new

student.ask_sap
if student.is_sap
redo
end

student.get_info

student.display_roausdf
gets

student.calculate_awards

puts &quot;\nStudent should be awarded: &quot;
student.display_awards
#student.display_stats  #optional

puts &quot;\nEnter 1 to continue or press any other key to exit&quot;
action = gets.chomp

end
&lt;/pre&gt;
&lt;p&gt;If you have any suggestions or comments about the program, tweet at me :).&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Apr 2015 16:18:22 -0500</pubDate>
        <link>joeypoon.com/blog/on-the-road-to-testing</link>
        <guid isPermaLink="true">joeypoon.com/blog/on-the-road-to-testing</guid>
        
        
      </item>
    
      <item>
        <title>Refactoring Complete</title>
        <description>&lt;p&gt;Mission success. It took a little longer than I expected but the &lt;a href=&quot;https://github.com/joeypoon/Summer_FA_Calculator&quot;&gt;program&lt;/a&gt; I have been &lt;a href=&quot;/blog/working-efficiently/&quot;&gt;working on&lt;/a&gt; is now looking like an actual program. It&#39;s a tiny program, but I am proud of my baby. Look how sexy it looks now:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone&quot; src=&quot;/blog/img/summer-fa-calc-easy-read.png&quot; alt=&quot;joey-poon-summer-FA-calc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Almost like reading English :).&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Apr 2015 01:58:50 -0500</pubDate>
        <link>joeypoon.com/blog/refactoring-complete</link>
        <guid isPermaLink="true">joeypoon.com/blog/refactoring-complete</guid>
        
        
      </item>
    
      <item>
        <title>Everyone Should Learn To Program</title>
        <description>&lt;p&gt;I have to be honest, I spent so much time working on a&lt;a href=&quot;/blog/working-efficiently/&quot;&gt; program that will do my job&lt;/a&gt; that I probably could have finished the job already. I&#39;m finally seeing first-hand what people mean when they say that software is never done. Every time I thought I was done, a bug would rear its head or I would realize that I forgot to include something. Then everything works great for an hour and then it blows up again. Fix it, add some convenience features, break it again, fix it again, refactor, and the cycle goes on and on. Needless to say, I would absolutely make the same decision to write the program again. While I certainly could have just done my job manually, writing a program to do it not only makes my job easier, it also makes it so that anyone doing my job in the future will have it easier. There is definitely a net time and productivity gain to be had.&lt;/p&gt;

&lt;p&gt;Beyond just netting more time and productivity down the line, this is an amazing learning experience. This is the first program I created to help me with my day job. As I write this program, I can see first hand where all the good software engineering advice you read online comes from. Currently, the &lt;a href=&quot;https://github.com/joeypoon/Summer_FA_Calculator&quot;&gt;program&lt;/a&gt; sits in a single file. I understand from all my reading that this is a terrible design. Trying to fix bugs in real-time, however, really gives it perspective. All the magic numbers, the lack of methods and classes, and lack of testing really humbles you. While I&#39;ll probably be done with my current stack of paperwork before I finish tidying up my code (yay, deadlines), I definitely plan on doing some major re-hauling of the code.&lt;/p&gt;

&lt;p&gt;So I just wrote 2 paragraphs and none of it has to do with why everyone should learn to program (because it&#39;s awesome, duh). Other than learning about programming itself, I learned a ridiculous amount of stuff about my job. Having to sit and pound out an algorithm to do your job for you really forces you to learn how everything works in the background (I no longer need this &lt;a href=&quot;http://ifap.ed.gov/dpcletters/attachments/20142015PellGrantPaymentandDisbursementSchedules.pdf&quot;&gt;atrocity&lt;/a&gt;). Things that work are no longer just magic. I&#39;m doing less work (programming isn&#39;t work!) and I&#39;m definitely better at my job now.&lt;/p&gt;

&lt;p&gt;Perhaps the most magical thing about this whole experience is the fact that I&#39;m enjoying work more. When I saw that stack of paperwork on Wednesday, I was depressed. Half of the reason I started writing a program to do my job was simply because I was procrastinating. As I got closer to completion, however, I found myself looking forward to starting to work on the paperwork. I was even excited to go into work this morning because I knew I could use my program for it. As I analyzed why I suddenly felt happier even though I still had to do a stack of applications, I realized that work was no longer work. The stack of papers was simply a test for my program. Every time I squashed a bug, I would eagerly put in the next application in hopes that it was crushed forever. Every time I added a feature, I would enter an application with anticipation. Programming just makes everything better.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Apr 2015 22:25:21 -0500</pubDate>
        <link>joeypoon.com/blog/everyone-should-learn-to-program</link>
        <guid isPermaLink="true">joeypoon.com/blog/everyone-should-learn-to-program</guid>
        
        
      </item>
    
  </channel>
</rss>
